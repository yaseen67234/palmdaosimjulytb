{"version":3,"sources":["candy-machine.ts","connection.tsx","userSettings.tsx","PhaseHeader.tsx","MintButton.tsx","countdown.tsx","Minter.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","account","candyMachine","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","id","isSoldOut","isActive","goLiveDate","Date","getTime","endSettings","endSettingType","date","number","treasury","wallet","tokenMint","gatekeeper","whitelistMintSettings","hiddenSettings","price","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getCandyMachineCreator","mintOneToken","Keypair","generate","getAtaForMint","publicKey","userTokenAccountAddress","userPayingAccountAddress","candyMachineAddress","remainingAccounts","signers","cleanupInstructions","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","getNetworkToken","gatekeeperNetwork","push","expireOnUse","CIVIC","getNetworkExpire","whitelistToken","mode","burnEveryTime","whitelistBurnAuthority","getAccountInfo","createApproveInstruction","createRevokeInstruction","transferAuthority","metadataAddress","masterEdition","candyMachineCreator","creatorBump","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","undefined","sendTransactions","txs","map","t","ms","SequenceType","instructionSet","signersSet","sequenceType","Parallel","commitment","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","transaction","Transaction","forEach","add","recentBlockhash","blockhash","setSigners","s","partialSign","signAllTransactions","signedTxns","pendingTxns","breakEarlyObject","breakEarly","signedTxnPromise","sendSignedTransaction","signedTransaction","then","catch","reason","StopOnFailure","all","getUnixTs","DEFAULT_TIMEOUT","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","confirmation","Error","error","simulateResult","simulateTransaction","logs","line","startsWith","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","result","onSignature","context","e","Phase","mintPanic","welcomeSettings","title","desc","countdownEnable","countdownTo","showPrice","enableCustomHTML","MintWelcomeCustomHTML","className","React","Component","whitelistSettings","enabled","startDate","endDate","countdown","MintWhitelistCustomHTML","publicSaleSettings","MintPublicSaleCustomHTML","CTAButton","styled","Button","MintButton","onMint","isMinting","useGateway","requestGatewayToken","gatewayStatus","useState","clicked","setClicked","whitelistStartDate","toDate","whitelistEndDate","publicMintStart","publicMintEnd","whiteListSaleCheck","now","WhitelistMintActive","publicSaleCheck","PublicMintActive","useEffect","GatewayStatus","ACTIVE","disabled","onClick","token","variant","CircularProgress","useStyles","makeStyles","theme","createStyles","root","display","padding","spacing","margin","marginRight","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","fontWeight","item","PhaseCountdown","style","start","end","onComplete","classes","isFixed","renderCountdown","days","hours","minutes","seconds","completed","Paper","elevation","renderer","Header","props","phaseName","Grid","container","position","top","left","Container","Typography","textAlign","PhaseHeader","phase","useWallet","Panic","Welcome","WhiteListMint","PublicMint","ConnectButton","WalletDialogButton","MintContainer","div","Home","rpcUrl","rpcHost","whiteListTokenBalance","setWhiteListTokenBalance","setIsMinting","mintingTotal","setMintingTotal","setItemsAvailable","setPublicKey","setCandyMachine","setPrice","useMemo","signTransaction","open","severity","alertState","setAlertState","document","getElementById","click","connected","mintTxId","txTimeout","msg","code","window","location","reload","indexOf","cndy","getParsedTokenAccountsByOwner","tokenAmount","parsed","info","amount","getTokenAmount","wlToken","discountPrice","curr","whiteListStart","whiteListEnd","publicSaleStart","getPhase","maxWidth","direction","clusterUrl","options","autoShowModal","Snackbar","autoHideDuration","onClose","Alert","createTheme","palette","type","process","Connection","startDateSeed","parseInt","REACT_APP_CANDY_START_DATE","App","endpoint","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSolletWallet","getMathWallet","toggleMenu","classList","toggle","src","alt","href","target","rel","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","Minter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","buyer"],"mappings":"wYAcaA,EAAwB,IAAIC,IAAYC,UACnD,+CAGIC,EAA4B,IAAIF,IAAYC,UAChD,+CAqCWE,EAAqC,uCAAG,WACnDC,EACAC,EACAC,GAHmD,iCAAAC,EAAA,4FAId,SACrCC,EALmD,gCAO/CC,GAAO,EACPC,EAAoD,CACtDC,KAAM,EACNC,cAAe,EACfC,IAAK,MAEHC,EAAQ,EAbuC,SAcpC,IAAIC,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,SAAAV,EAAA,sDACzBW,YAAW,WACLT,IAGJA,GAAO,EACPU,QAAQC,IAAI,4BACZH,EAAO,CAAEZ,SAAS,OACjBA,GARsB,UASjBI,IAAQD,EATS,uBAWvB,sBAAC,4BAAAD,EAAA,+EAEmCD,EAAWe,qBAAqB,CAC9DjB,IAHL,OAESkB,EAFT,OAKGZ,EAASY,GAAqBA,EAAkBC,MAAM,GACjDd,IACEC,EAEMA,EAAOG,KAChBM,QAAQC,IAAI,iBAAkBhB,EAAMM,GACpCD,GAAO,EACPQ,EAAOP,EAAOG,MACJH,EAAOE,eAGjBO,QAAQC,IAAI,wBAAyBhB,EAAMM,GAC3CD,GAAO,EACPO,EAAQN,IAJRS,QAAQC,IAAI,4BAA6BhB,EAAMM,GAN/CS,QAAQC,IAAI,uBAAwBhB,EAAMM,IARjD,gDAsBQD,GACHU,QAAQC,IAAI,8BAA+BhB,EAA3C,MAvBL,wDAAD,GAXuB,SAsCjBoB,EAAM,KAtCW,iEAAZ,yDAdoC,cAcnDd,EAdmD,OAyD/CJ,EAAWmB,wBAAwBX,IACrCR,EAAWoB,wBAAwBZ,GAErCL,GAAO,EACPU,QAAQC,IAAI,mBAAoBV,GA7DmB,kBA8D5CA,GA9D4C,4CAAH,0DAiE/BiB,EAA0C,SAC3DC,EACAC,EACAC,EACAC,GAEA,IAAMC,EAAO,CACX,CAAEC,OAAQJ,EAAOK,UAAU,EAAMC,YAAY,GAC7C,CAAEF,OAAQL,EAAwBM,UAAU,EAAOC,YAAY,GAC/D,CAAEF,OAAQH,EAAeI,UAAU,EAAOC,YAAY,GACtD,CAAEF,OAAQF,EAAqBG,UAAU,EAAOC,YAAY,GAC5D,CACEF,OAAQjC,IAAYoC,cAAcC,UAClCH,UAAU,EACVC,YAAY,GAEd,CAAEF,OAAQK,IAAkBJ,UAAU,EAAOC,YAAY,GACzD,CACEF,OAAQjC,IAAYuC,mBACpBL,UAAU,EACVC,YAAY,IAGhB,OAAO,IAAInC,IAAYwC,uBAAuB,CAC5CR,OACAK,UAAWI,IACXC,KAAMC,EAAOC,KAAK,OAITC,EAAoB,uCAAG,WAClCC,EACAC,EACAzC,GAHkC,2BAAAC,EAAA,6DAK5ByC,EAAW,IAAIhD,IAAgBM,EAAYwC,EAAc,CAC7DG,oBAAqB,WANW,SAShBjD,IAAekD,SAASnD,EAAuBiD,GAT/B,cAS5BG,EAT4B,OAW5BC,EAAU,IAAIpD,IAAemD,EAAKpD,EAAuBiD,GAX7B,SAaTI,EAAQC,QAAQC,aAAaC,MAAMR,GAb1B,cAa5BS,EAb4B,OAc5BC,EAAiBD,EAAMd,KAAKe,eAAeC,WAC3CC,EAAgBH,EAAMG,cAAcD,WACpCE,EAAiBH,EAAiBE,EAhBN,kBAkB3B,CACLE,GAAId,EACJK,UACAI,MAAO,CACLC,iBACAE,gBACAC,iBACAE,UAA8B,IAAnBF,EACXG,SACEP,EAAMd,KAAKsB,WAAWN,YAAa,IAAIO,MAAOC,UAAY,OACzDV,EAAMW,cACHX,EAAMW,YAAYC,eAAeC,KAC/Bb,EAAMW,YAAYG,OAAOZ,YAAa,IAAIO,MAAOC,UAAY,IAC7DP,EAAgBH,EAAMW,YAAYG,OAAOZ,aAEjDM,WAAYR,EAAMd,KAAKsB,WACvBO,SAAUf,EAAMgB,OAChBC,UAAWjB,EAAMiB,UACjBC,WAAYlB,EAAMd,KAAKgC,WACvBP,YAAaX,EAAMd,KAAKyB,YACxBQ,sBAAuBnB,EAAMd,KAAKiC,sBAClCC,eAAgBpB,EAAMd,KAAKkC,eAC3BC,MAAOrB,EAAMd,KAAKmC,SAxCY,4CAAH,0DA6C3BC,EAAgB,uCAAG,WACvBC,GADuB,SAAAxE,EAAA,sEAIfP,IAAYC,UAAU+E,mBAC1B,CACErC,EAAOC,KAAK,YACZ1C,EAA0B+E,WAC1BF,EAAKE,WACLtC,EAAOC,KAAK,YAEd1C,GAXmB,uCAarB,IAbqB,2CAAH,sDAgBhBgF,EAAW,uCAAG,WAClBH,GADkB,SAAAxE,EAAA,sEAIVP,IAAYC,UAAU+E,mBAC1B,CACErC,EAAOC,KAAK,YACZ1C,EAA0B+E,WAC1BF,EAAKE,YAEP/E,GAVc,uCAYhB,IAZgB,2CAAH,sDAeJiF,EAAsB,uCAAG,WACpC7B,GADoC,SAAA/C,EAAA,sEAGvBP,IAAYC,UAAU+E,mBACjC,CAACrC,EAAOC,KAAK,iBAAkBU,EAAa2B,YAC5ClF,GALkC,mFAAH,sDAStBqF,EAAY,uCAAG,WAC1B9B,EACAzB,GAF0B,iDAAAtB,EAAA,6DAIpBwE,EAAO/E,IAAYqF,QAAQC,WAJP,SAOlBC,YAAcR,EAAKS,UAAW3D,GAPZ,UAMpB4D,EANoB,OAQxB,IAE+BnC,EAAaE,MAAMiB,UAV1B,iCAWfc,YAAcjC,EAAaE,MAAMiB,UAAW5C,GAX7B,mBAWqC,GAXrC,6BAYtBA,EAZsB,eAUpB6D,EAVoB,KAcpBC,EAAsBrC,EAAaO,GACnC+B,EAAoB,GACpBC,EAAiC,CAACd,GAClCe,EAAsB,GAjBF,KAmBxB9F,IAAYoC,cAnBY,KAoBVP,EApBU,KAqBJkD,EAAKS,UArBD,KAsBfO,IAAWC,KAtBI,UAwBd1C,EAAaF,QAAQJ,SAAS1C,WAAW2F,kCAC7CF,IAAWC,MAzBO,4BA2BX1D,IA3BW,MAoBtB4D,WApBsB,KAqBtBC,iBArBsB,KAsBtBC,MAtBsB,KAuBtBC,SAvBsB,KA2BtBhE,UA3BsB,gBAmBEiE,cAnBF,qBA6BxBC,IAAMC,0BACJlE,IACAyC,EAAKS,UACL,EACA3D,EACAA,GAlCsB,MAoCxBF,EACE8D,EACA5D,EACAA,EACAkD,EAAKS,WAxCiB,MA0CxBe,IAAME,wBACJnE,IACAyC,EAAKS,UACLC,EACA5D,EACA,GACA,GA9BE6E,EAlBoB,yBAoDtBpD,EAAaE,MAAMkB,WApDG,8BAqDxBkB,EArDwB,UAuDde,YACJ9E,EACAyB,EAAaE,MAAMkB,WAAWkC,mBAzDZ,wBA2DpB,GA3DoB,OAsDtB3E,OAtDsB,MA4DtBE,YAAY,EACZD,UAAU,GA7DY,MAqDN2E,KArDM,mBA+DpBvD,EAAaE,MAAMkB,WAAWoC,YA/DV,wBAgEtBlB,EAAkBiB,KAAK,CACrB5E,OAAQ8E,IACR5E,YAAY,EACZD,UAAU,IAnEU,MAqEtB0D,EArEsB,UAuEZoB,YACJ1D,EAAaE,MAAMkB,WAAWkC,mBAxEd,qBA0ElB,GA1EkB,OAsEpB3E,OAtEoB,MA2EpBE,YAAY,EACZD,UAAU,GA5EU,MAqEJ2E,KArEI,8BAgFtBvD,EAAaE,MAAMmB,sBAhFG,wBAiFlBI,EAAO,IAAI/E,IAAYC,UAC3BqD,EAAaE,MAAMmB,sBAAsBI,MAlFnB,UAqFMQ,YAAcR,EAAMlD,GArF1B,WAqFlBoF,EArFkB,OAqFkC,GAC1DrB,EAAkBiB,KAAK,CACrB5E,OAAQgF,EACR9E,YAAY,EACZD,UAAU,KAGRoB,EAAaE,MAAMmB,sBAAsBuC,KAAKC,cA5F1B,wBA6FhBC,EAAyBpH,IAAYqF,QAAQC,WAEnDM,EAAkBiB,KAAK,CACrB5E,OAAQ8C,EACR5C,YAAY,EACZD,UAAU,IAEZ0D,EAAkBiB,KAAK,CACrB5E,OAAQmF,EAAuB5B,UAC/BrD,YAAY,EACZD,UAAU,IAEZ2D,EAAQgB,KAAKO,GAzGS,UA2Gd9D,EAAaF,QAAQJ,SAAS1C,WAAW+G,eAC7CJ,GA5GkB,iBA+GpBP,EAAaG,KACXN,IAAMe,yBACJhF,IACA2E,EACAG,EAAuB5B,UACvB3D,EACA,GACA,IAGJiE,EAAoBe,KAClBN,IAAMgB,wBACJjF,IACA2E,EACApF,EACA,MA9HgB,eAqItByB,EAAaE,MAAMiB,YACf+C,EAAoBxH,IAAYqF,QAAQC,WAE9CO,EAAQgB,KAAKW,GACb5B,EAAkBiB,KAAK,CACrB5E,OAAQyD,EACRvD,YAAY,EACZD,UAAU,IAEZ0D,EAAkBiB,KAAK,CACrB5E,OAAQuF,EAAkBhC,UAC1BrD,YAAY,EACZD,UAAU,IAGZwE,EAAaG,KACXN,IAAMe,yBACJhF,IACAoD,EACA8B,EAAkBhC,UAClB3D,EACA,GACAyB,EAAaE,MAAMqB,MAAMnB,aAG7BoC,EAAoBe,KAClBN,IAAMgB,wBACJjF,IACAoD,EACA7D,EACA,MAnKoB,UAuKIqD,EAAYH,EAAKS,WAvKrB,eAuKpBiC,EAvKoB,iBAwKE3C,EAAiBC,EAAKS,WAxKxB,eAwKpBkC,EAxKoB,iBA0KuBvC,EAC/CQ,GA3KwB,2CA0KnBgC,EA1KmB,KA0KEC,EA1KF,WA8K1BlB,EA9K0B,UA+KlBpD,EAAaF,QAAQyE,YAAYC,QAAQF,EAAa,CAC1DG,SAAU,CACRzE,aAAcqC,EACdgC,sBACA9F,MAAOA,EACP2C,OAAQlB,EAAaE,MAAMe,SAC3BQ,KAAMA,EAAKS,UACXwC,SAAUP,EACVC,gBACAO,cAAepG,EACfqG,gBAAiBrG,EACjBsG,qBAAsBjI,EACtBkI,aAAc9F,IACd+F,cAAejG,gBAAcC,UAC7BiG,KAAMtI,IAAYuC,mBAClBgG,MAAOvI,IAAYwI,oBACnBC,kBAAmBzI,IAAY0I,iCAC/BC,yBAA0B3I,IAAY4I,4BAExChD,kBACEA,EAAkBiD,OAAS,EAAIjD,OAAoBkD,IAnM/B,kCA8KbjC,KA9Ka,sCAyMhBkC,YACJzF,EAAaF,QAAQJ,SAAS1C,WAC9BgD,EAAaF,QAAQJ,SAASwB,OAC9B,CAACkC,EAAcZ,GACf,CAACD,EAAS,KA7MU,wCA+MtBmD,IAAIC,KAAI,SAAAC,GAAC,OAAIA,EAAE9I,SA/MO,oCAiNxBe,QAAQC,IAAR,OAjNwB,iCAoNnB,IApNmB,2DAAH,wDA2NnBI,EAAQ,SAAC2H,GACb,OAAO,IAAIpI,SAAQ,SAAAC,GAAO,OAAIE,WAAWF,EAASmI,S,gGCrZxCC,E,yDAAAA,O,2BAAAA,I,uBAAAA,I,kCAAAA,M,KAyEL,IAAML,EAAgB,uCAAG,WAC9BzI,EACAkE,EACA6E,EACAC,GAJ8B,qDAAA/I,EAAA,yDAK9BgJ,EAL8B,+BAKDH,EAAaI,SAC1CC,EAN8B,+BAML,eACzBC,EAP8B,+BAOyB,SAACtJ,EAAMuJ,KAC9DC,EAR8B,+BAQ2B,SAACxJ,EAAMuJ,GAAP,OAAe,GACxEE,EAT8B,uBAWzBrF,EAAOgB,UAXkB,sBAWD,IAAIsE,IAXH,UAaxBC,EAA8B,GAE/BF,EAfyB,kCAgBdvJ,EAAW0J,mBAAmBP,GAhBhB,QAgB5BI,EAhB4B,0BAmBrBI,GACP,IAAMvD,EAAe2C,EAAeY,GAC9BpE,EAAUyD,EAAWW,GAE3B,GAA4B,IAAxBvD,EAAamC,OACf,iBAGF,IAAIqB,EAAc,IAAIC,cACtBzD,EAAa0D,SAAQ,SAAAvC,GAAW,OAAIqC,EAAYG,IAAIxC,MACpDqC,EAAYI,gBAAkBT,EAAMU,UACpCL,EAAYM,WAAZ,MAAAN,EAAW,CAET1F,EAAOgB,WAFE,mBAGNK,EAAQoD,KAAI,SAAAwB,GAAC,OAAIA,EAAEjF,gBAGpBK,EAAQgD,OAAS,GACnBqB,EAAYQ,YAAZ,MAAAR,EAAW,YAAgBrE,IAG7BkE,EAAalD,KAAKqD,IArBXD,EAAI,EAnBiB,aAmBdA,EAAIZ,EAAeR,QAnBL,mCAmBrBoB,GAnBqB,wDAmBaA,IAnBb,yCA2CLzF,EAAOmG,oBAAoBZ,GA3CtB,QA2CxBa,EA3CwB,OA6CxBC,EAAyD,GAE3DC,EAAmB,CAAEC,YAAY,EAAOd,EAAG,GAC/C9I,QAAQC,IACN,qBACAwJ,EAAW/B,OACX,sBACAQ,EAAeR,QApDa,IAAAtI,EAAA,iBAsDrB0J,GAtDqB,eAAA1J,EAAA,0DAuDtByK,EAAmBC,EAAsB,CAC7C3K,aACA4K,kBAAmBN,EAAWX,MAI7BkB,MAAK,YAAqB,IAAlB/K,EAAiB,EAAjBA,KAAiB,EAAXO,KACb+I,EAAgBtJ,EAAM6J,MAEvBmB,OAAM,SAAAC,GAELzB,EAAagB,EAAWX,GAAIA,GACxBV,IAAiBH,EAAakC,gBAChCR,EAAiBC,YAAa,EAC9BD,EAAiBb,EAAIA,MAIvBV,IAAiBH,EAAaI,SAzEN,0CA2ElBwB,EA3EkB,0DA6ExB7J,QAAQC,IAAI,iBAAZ,OACI0J,EAAiBC,WA9EG,wBA+EtB5J,QAAQC,IAAI,WAAY0J,EAAiBb,GA/EnB,KAkFZa,EAAiBb,EAlFL,UAmFTlJ,QAAQwK,IAAIV,GAnFH,iCAkFpBvG,OAlFoB,KAmFpB0E,IAnFoB,kEAwF1B6B,EAAYhE,KAAKmE,GAxFS,wDAsDrBf,EAAI,EAtDiB,aAsDdA,EAAIW,EAAW/B,QAtDD,0CAsDrBoB,GAtDqB,qGAsDSA,IAtDT,2BA4F1BV,IAAiBH,EAAaI,SA5FJ,kCA6FtBzI,QAAQwK,IAAIV,GA7FU,oBAgGbD,EAAW/B,OAhGE,UAgGiB9H,QAAQwK,IAAIV,GAhG7B,8CAgGrBvG,OAhGqB,KAgGM0E,IAhGN,mDAAH,4DAqNhBwC,EAAY,WACvB,OAAO,IAAIvH,MAAOC,UAAY,KAG1BuH,EAAkB,KAEjB,SAAeR,EAAtB,kC,4CAAO,qDAAA1K,EAAA,6DACL2K,EADK,EACLA,kBACA5K,EAFK,EAELA,WAFK,IAGLD,eAHK,MAGKoL,EAHL,EAYCC,EAAiBR,EAAkBS,YACnCC,EAAYJ,IACd7K,EAAO,EAdN,SAeoCL,EAAWuL,mBAClDH,EACA,CACEI,eAAe,IAlBd,cAeC1L,EAfD,OAsBLe,QAAQC,IAAI,oCAAqChB,GAE7CK,GAAO,EACX,sBAAC,sBAAAF,EAAA,yDACSE,KAAQ+K,IAAcI,EAAYvL,GAD3C,uBAEGC,EAAWuL,mBAAmBH,EAAgB,CAC5CI,eAAe,IAHpB,SAKStK,EAAM,KALf,gEAAD,GAzBK,oBAkCwBrB,EACzBC,EACAC,EACAC,EACA,UACA,GAvCC,WAkCGyL,EAlCH,8BA2CK,IAAIC,MAAM,kDA3Cf,YA6CCD,EAAalL,IA7Cd,uBA8CDM,QAAQ8K,MAAMF,EAAalL,KACrB,IAAImL,MAAM,gDA/Cf,QAkDHrL,GAAmB,OAAZoL,QAAY,IAAZA,OAAA,EAAAA,EAAcpL,OAAQ,EAlD1B,sDAoDHQ,QAAQ8K,MAAM,uBAAd,OACI,KAAI5L,QArDL,uBAsDK,IAAI2L,MAAM,kDAtDf,eAwDCE,EAAsD,KAxDvD,oBA2DOC,EAAoB7L,EAAY4K,EAAmB,UA3D1D,QA0DDgB,EA1DC,OA4DC3K,MA5DD,+DA8DC2K,IAAkBA,EAAerL,IA9DlC,qBA+DGqL,EAAeE,KA/DlB,iBAgEUnC,EAAIiC,EAAeE,KAAKvD,OAAS,EAhE3C,aAgE8CoB,GAAK,GAhEnD,sBAiESoC,EAAOH,EAAeE,KAAKnC,IACxBqC,WAAW,iBAlEvB,uBAmEW,IAAIN,MACR,uBAAyBK,EAAKE,MAAM,gBAAgB1D,SApE3D,UAgEwDoB,EAhExD,8BAyEK,IAAI+B,MAAMQ,KAAKC,UAAUP,EAAerL,MAzE7C,yBA6EHJ,GAAO,EA7EJ,4BAgFLU,QAAQC,IAAI,UAAWhB,EAAMoL,IAAcI,GAhFtC,kBAiFE,CAAExL,OAAMO,SAjFV,0E,+BAoFQwL,E,kFAAf,WACE7L,EACA4J,EACAT,GAHF,uBAAAlJ,EAAA,sEAMsCD,EAAWoM,iBAE7CpM,EAAWqM,0BARf,cAMEzC,EAAYI,gBANd,OAWQsC,EAAW1C,EAAY2C,mBAEvBC,EAAkB5C,EAAY6C,WAAWH,GACzCI,EAAqBF,EAAgBG,SAAS,UAE9CC,EAAO,CAACF,EADM,CAAEG,SAAU,SAAU1D,eAf5C,UAmBoBnJ,EAAW8M,YAAY,sBAAuBF,GAnBlE,aAmBQG,EAnBR,QAoBUpB,MApBV,uBAqBU,IAAID,MAAM,mCAAqCqB,EAAIpB,MAAMqB,SArBnE,iCAuBSD,EAAIE,QAvBb,6C,+BA0BepN,E,kFAAf,WACEC,EACAC,EACAC,GAHF,mCAAAC,EAAA,6DAIEkJ,EAJF,+BAI2B,SACzBjJ,EALF,gCAOMC,GAAO,EACPC,EAAwC,CAC1CC,KAAM,EACNC,cAAe,EACfC,IAAK,MAEHC,EAAQ,EAbd,SAciB,IAAIC,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,SAAAV,EAAA,sDACzBW,YAAW,WACLT,IAGJA,GAAO,EACPU,QAAQC,IAAI,4BACZH,EAAO,CAAEZ,SAAS,OACjBA,GACH,IACES,EAAQR,EAAWkN,YACjBpN,GACA,SAACmN,EAAQE,GACPhN,GAAO,EACPC,EAAS,CACPG,IAAK0M,EAAO1M,IACZF,KAAM8M,EAAQ9M,KACdC,cAAe,GAEb2M,EAAO1M,KACTM,QAAQC,IAAI,yBAA0BmM,EAAO1M,KAC7CI,EAAOP,KAEPS,QAAQC,IAAI,yBAA0BmM,GACtCvM,EAAQN,MAGZ+I,GAEF,MAAOiE,GACPjN,GAAO,EACPU,QAAQ8K,MAAM,oBAAqB7L,EAAMsN,GA/BlB,UAiCjBjN,IAAQD,EAjCS,uBAmCvB,sBAAC,4BAAAD,EAAA,+EAEmCD,EAAWe,qBAAqB,CAC9DjB,IAHL,OAESkB,EAFT,OAKGZ,EAASY,GAAqBA,EAAkBC,MAAM,GACjDd,IACEC,EAEMA,EAAOG,KAChBM,QAAQC,IAAI,iBAAkBhB,EAAMM,GACpCD,GAAO,EACPQ,EAAOP,EAAOG,MACJH,EAAOE,eAGjBO,QAAQC,IAAI,wBAAyBhB,EAAMM,GAC3CD,GAAO,EACPO,EAAQN,IAJRS,QAAQC,IAAI,4BAA6BhB,EAAMM,GAN/CS,QAAQC,IAAI,uBAAwBhB,EAAMM,IARjD,gDAsBQD,GACHU,QAAQC,IAAI,8BAA+BhB,EAA3C,MAvBL,wDAAD,GAnCuB,SA8DjBoB,EAAM,KA9DW,iEAAZ,yDAdjB,cAcEd,EAdF,OAiFMJ,EAAWmB,wBAAwBX,IACrCR,EAAWoB,wBAAwBZ,GACrCL,GAAO,EACPU,QAAQC,IAAI,mBAAoBV,GApFlC,kBAqFSA,GArFT,4C,wBAuFO,SAASc,EAAM2H,GACpB,OAAO,IAAIpI,SAAQ,SAAAC,GAAO,OAAIE,WAAWF,EAASmI,Q,sfCphBpD,SAAS9E,EAAKA,GAEZ,OADQ,IAAIrE,IAAU,IAAIiE,KAAKI,GAAMH,UAAY,KA8B5C,I,ECzBKyJ,EDyBCC,GACF,EADEA,EAEJ,iBAFIA,EAGL,mEAOKC,EAAmC,CAG9CC,MAAO,WACPC,KAAM,+DAGNC,iBAAiB,EACjBC,YAAa5J,EAAK,2BAKlB6J,WAAW,EAGXC,kBAAkB,GAGPC,EAAb,4JACE,WACE,OACE,qBAAKC,UAAU,wBAAf,SAIE,6CAPR,GAA2CC,IAAMC,WA4BpCC,EAAuC,CAElDC,SAAS,EAETC,UAAWrK,EAAK,2BAChBsK,QAAStK,EAAK,2BACduK,WAAW,EAKXd,MAAO,aACPC,UAAMjF,EAGNqF,kBAAkB,GAIPU,EAAb,4JACE,WACE,OACE,qBAAKR,UAAU,wBAAf,SAIE,4BAPR,GAA6CC,IAAMC,WAqBtCO,EAAyC,CAGpDJ,UAAWrK,EAAK,2BAChBsK,aAAS7F,EACT8F,WAAW,EAKXd,MAAO,mBACPC,KAAM,4DAGNI,kBAAkB,GAGPY,EAAb,4JACE,WACE,OACE,qBAAKV,UAAU,wBAAf,SAIE,4BAPR,GAA8CC,IAAMC,W,QE/IvCS,EAAYC,YAAOC,IAAPD,CAAH,0OAYTE,EAAa,SAAC,GAapB,IAAD,QAZJC,EAYI,EAZJA,OACA9L,EAWI,EAXJA,aAEA+L,EASI,EATJA,UAUA,EAA+CC,cAAvCC,EAAR,EAAQA,oBAAqBC,EAA7B,EAA6BA,cAC7B,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACMC,EAAkB,UAAGC,YAAOrB,EAAkBE,kBAA5B,aAAG,EAAqCxK,UAC1D4L,EAAgB,UAAGD,YAAOrB,EAAkBG,gBAA5B,aAAG,EAAmCzK,UACtD6L,EAAe,UAAGF,YAAOf,EAAmBJ,kBAA7B,aAAG,EAAsCxK,UACxD8L,EAAa,UAAGH,YAAOf,EAAmBH,gBAA7B,aAAG,EAAoCzK,UAE1D,SAAS+L,IACP,SAAIzB,EAAkBC,SAAYmB,GAAsBE,GAAsB7L,KAAKiM,MAAQN,GAAsB3L,KAAKiM,MAAQJ,GAShI,IAAIK,EAAsBF,IAG1B,SAASG,IAEP,OAAIL,GAAmBC,EAClB/L,KAAKiM,MAAQH,GAAmB9L,KAAKiM,MAAQF,EAMzCD,EACH9L,KAAKiM,MAAQH,OADd,EAXP5O,QAAQC,IAAI,6BAA+B6O,KAuB3C,IAAII,EAAmBD,IAavB,OAXAjP,QAAQC,IAAI,wBAAyBgP,KAErCjP,QAAQC,IAAR,OAAYkC,QAAZ,IAAYA,OAAZ,EAAYA,EAAcE,MAAMM,UAAWuL,EAAYc,GAAuBE,IAAmB,OAAC/M,QAAD,IAACA,KAAcE,MAAMO,WAEtHuM,qBAAU,WACJd,IAAkBe,IAAcC,QAAUd,IAC5CvO,QAAQC,IAAI,WACZgO,IACAO,GAAW,MAEZ,CAACH,EAAeE,EAASC,EAAYP,IAEtC,cAACJ,EAAD,CACEX,UAAU,iBACVoC,UACc,OAAZnN,QAAY,IAAZA,OAAA,EAAAA,EAAcE,MAAMM,YACpBuL,GACAzB,KACEuC,GAAuBE,GAI3BK,QAAO,sBAAE,4BAAAnQ,EAAA,yDACPoP,GAAW,GACK,OAAZrM,QAAY,IAAZA,MAAcE,MAAMO,UAApB,OAAgCT,QAAhC,IAAgCA,MAAcE,MAAMkB,WAFjD,oBAGLvD,QAAQC,IAAI,qBACRoO,IAAkBe,IAAcC,OAJ/B,gBAKHrP,QAAQC,IAAIoO,EAAgBe,IAAcC,QAC1Cb,GAAW,GANR,8BAQHxO,QAAQC,IAAI,mBART,UASgBmO,IAThB,QASEoB,EATF,OAUHxP,QAAQC,IAAIuP,GAVT,iDAaCvB,IAbD,QAcLO,GAAW,GAdN,4CAiBTiB,QAAQ,YA3BV,SA6BE,qBAAKvC,UAAU,mBAAf,SACa,OAAZ/K,QAAY,IAAZA,KAAcE,MAAMM,UACnB,WACEuL,EACF,cAACwB,EAAA,EAAD,IAEEjD,EAEF,cAGA,Y,oCC/HFkD,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,QAAS,OACTC,QAASJ,EAAMK,QAAQ,GACvB,QAAS,CACPC,OAAQN,EAAMK,QAAQ,IACtBE,YAAa,EACbC,MAAOR,EAAMK,QAAQ,GACrBI,OAAQT,EAAMK,QAAQ,GACtBF,QAAS,OACTO,cAAe,SACfC,aAAc,SACdC,WAAY,SACZC,eAAgB,SAChBC,WAAY,UACZC,MAAO,QACPC,aAAc,EACdC,SAAU,KAGdxR,KAAM,CACJ0Q,QAAS,OACTG,OAAQN,EAAMK,QAAQ,GACtBE,YAAa,EACbH,QAASJ,EAAMK,QAAQ,GACvBK,cAAe,SACfC,aAAc,SACdC,WAAY,SACZC,eAAgB,SAChBC,WAAY,UACZC,MAAO,QACPC,aAAc,EACdE,WAAY,OACZD,SAAU,IAEZE,KAAM,CACJD,WAAY,OACZD,SAAU,SAuBHG,EAAgD,SAAC,GAOvD,IANL/N,EAMI,EANJA,KACA3D,EAKI,EALJA,OACA2R,EAII,EAJJA,MACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,IACAC,EACI,EADJA,WAEMC,EAAU3B,IAEhB,EAA8BrB,sBAAS6C,GAASC,GAAOlO,IAAOiO,EAAMpO,UAAYD,KAAKiM,MAAQ,GAA7F,mBAAOwC,EAAP,KAEMC,GAFN,KAEwB,SAAC,GAAmE,IAAjEC,EAAgE,EAAhEA,KAAMC,EAA0D,EAA1DA,MAAOC,EAAmD,EAAnDA,QAASC,EAA0C,EAA1CA,QAE/C,OADAF,GAAgB,GAAPD,EADgF,EAAjCI,UAG/CtS,EAAS,sBAAM2N,UAAWoE,EAAQhS,KAAzB,SAAkCC,IAAiB,KAGjE,sBAAK2N,UAAWoE,EAAQvB,KAAMmB,MAAOA,EAArC,UACGK,GAAW,cAACO,EAAA,EAAD,CAAOC,UAAW,EAAlB,SACV,sBAAM7E,UAAWoE,EAAQN,KAAzB,iBAIF,eAACc,EAAA,EAAD,CAAOC,UAAW,EAAlB,UACE,sBAAM7E,UAAWoE,EAAQN,KAAzB,SACGU,EAAQ,GAAR,WAAiBA,GAAUA,IAE9B,0CAEF,eAACI,EAAA,EAAD,CAAOC,UAAW,EAAlB,UACE,sBAAM7E,UAAWoE,EAAQN,KAAzB,SACGW,EAAU,GAAV,WAAmBA,GAAYA,IAElC,2CAEF,eAACG,EAAA,EAAD,CAAOC,UAAW,EAAlB,UACE,sBAAM7E,UAAWoE,EAAQN,KAAzB,SACGY,EAAU,GAAV,WAAmBA,GAAYA,IAElC,gDAkBV,OAXI1O,GAAQiO,GAASC,GACfG,GACD,IASDrO,EAEA,cAAC,IAAD,CACEA,KAAMA,EACNmO,WAAYA,EACZW,SAAUR,IAIP,O,SFtHChF,O,yCAAAA,I,uBAAAA,I,6BAAAA,I,qBAAAA,I,mCAAAA,I,yBAAAA,I,mBAAAA,I,qBAAAA,I,iCAAAA,I,2BAAAA,I,sBAAAA,I,mBAAAA,M,KA4CZ,I,KAAMyF,GAAS,SAACC,GAQd,IAAQC,EAAmDD,EAAnDC,UAAWvF,EAAwCsF,EAAxCtF,KAAM1J,EAAkCgP,EAAlChP,KAAM3D,EAA4B2S,EAA5B3S,OAAQsN,EAAoBqF,EAApBrF,gBACvC,OACE,sCACuB,IAApBA,GACC,cAACuF,EAAA,EAAD,CACEC,WAAS,EACTnB,MAAO,CAAEoB,SAAU,WAAYC,IAAK,QAASC,KAAM,OAFrD,SAIE,cAACC,EAAA,EAAD,CAAWvB,MAAO,CAAER,eAAgB,UAApC,SACE,cAAC,EAAD,CACExN,KAAMwL,YAAOxL,GACbgO,MAAO,CAAER,eAAgB,UACzBnR,OAAQA,GAAU,iBAK1B,cAAC6S,EAAA,EAAD,CAAMC,WAAS,EAACnF,UAAU,aAAauD,WAAW,SAAlD,SACE,cAAC2B,EAAA,EAAD,UACE,cAACM,EAAA,EAAD,CACEjD,QAAQ,KACRyB,MAAO,CAAEH,WAAY,IAAK4B,UAAW,UACrCzF,UAAU,OAHZ,SAKGiF,QAINvF,GACC,cAAC8F,EAAA,EAAD,CAAYxF,UAAU,OAAOuC,QAAQ,QAAQmB,MAAM,gBAAnD,SACGhE,QAeEgG,GAAc,SAAC,GAMH,IALvBC,EAKsB,EALtBA,MAEA1Q,EAGsB,EAHtBA,aAIMkB,EAASyP,cAIf,OAHA9S,QAAQC,IAAI,IAAKkC,GACjBnC,QAAQC,IAAI,SAAUoD,GAGpB,qCACGwP,IAAUrG,EAAMuG,OACf,cAAC,GAAD,CAAQZ,UAAW1F,EAAiBG,KAAMH,IAG3CoG,IAAUrG,EAAMwG,SACf,cAAC,GAAD,CACEb,UAAWzF,EAAgBC,MAC3BC,KAAMF,EAAgBE,KACtB1J,KAAMwJ,EAAgBI,YACtBD,gBAAiBH,EAAgBG,kBAIpCgG,IAAUrG,EAAMyG,eACf,mCACE,cAAC,GAAD,CACEd,UAAW9E,EAAkBV,MAC7BC,KAAMS,EAAkBT,KACxB1J,KAAMmK,EAAkBG,QACxBX,gBAAiBQ,EAAkBI,UACnClO,OAAO,qBAKZsT,IAAUrG,EAAM0G,YACf,mCACE,cAAC,GAAD,CACEf,UAAWxE,EAAmBhB,MAC9BC,KAAMe,EAAmBf,KACzB1J,KAAMyK,EAAmBH,QACzBX,gBAAiBc,EAAmBF,UACpClO,OAAO,eG1Hb4T,GAAgBrF,YAAOsF,IAAPtF,CAAH,gUAebuF,GAAgBvF,IAAOwF,IAAV,oGAgWJC,GAhVF,SAACrB,GAAsB,IAAD,IAE3BsB,EAAStB,EAAMuB,QACrB,EAA0DnF,mBAAiB,GAA3E,mBAAOoF,EAAP,KAA8BC,EAA9B,KACA,EAAkCrF,oBAAS,GAA3C,mBAAOJ,EAAP,KAAkB0F,EAAlB,KACA,EAAwCtF,mBAAwB,MAAhE,mBAAOuF,EAAP,KAAqBC,EAArB,KACA,EAA4CxF,mBAAwB,MAApE,mBAAOhM,EAAP,KAAuByR,EAAvB,KACA,EAAkCzF,qBAAlC,mBAAOjK,EAAP,KAAkB2P,EAAlB,KAEA,EAAwC1F,qBAAxC,mBAAOnM,EAAP,KAAqB8R,EAArB,KAEA,EAA0B3F,mBAAwB,MAAlD,oBAAO5K,GAAP,MAAcwQ,GAAd,MAEM7Q,GAASyP,cAETnR,GAAewS,mBAAQ,WAC3B,GACG9Q,IACAA,GAAOgB,WACPhB,GAAOmG,qBACPnG,GAAO+Q,gBAKV,MAAO,CACL/P,UAAWhB,GAAOgB,UAClBmF,oBAAqBnG,GAAOmG,oBAC5B4K,gBAAiB/Q,GAAO+Q,mBAEzB,CAAC/Q,KAEJ,GAAoCiL,mBAAqB,CACvD+F,MAAM,EACNlI,QAAS,GACTmI,cAAU3M,IAHZ,qBAAO4M,GAAP,MAAmBC,GAAnB,MAMMvG,GAAM,uCAAG,oCAAA7O,EAAA,kEAEXwU,GAAa,GACb,UAAAa,SAASC,eAAe,oBAAxB,SAAsCC,UAClCtR,GAAOuR,WAAP,OAAoBzS,QAApB,IAAoBA,KAAcF,SAAWoB,GAAOgB,WAJ7C,iCAMDJ,YAAa9B,EAAckB,GAAOgB,WANjC,UAKHwQ,EALG,OAOP,GAEEtV,EAAc,CAAEG,KAAK,IACrBmV,EAVK,kCAWQ7V,YACb6V,EACA3C,EAAM4C,UACN5C,EAAM/S,WACN,gBACA,GAhBK,QAWPI,EAXO,eAoBL,UAACA,SAAD,OAAC,EAAQG,IAYX8U,GAAc,CACZH,MAAM,EACNlI,QAAS,iCACTmI,SAAU,WAdZE,GAAc,CACZH,MAAM,EACNlI,QAAS,mCACTmI,SAAU,YAGZR,EAAgBD,EAAgB,GAE5BH,GAAyBA,EAAwB,GACnDC,EAAyBD,EAAwB,IA9B5C,0DAyCPvH,EAAU,KAAM4I,KAAO,oCACtB,KAAMA,IAUU,MAAf,KAAMC,MACR7I,EAAO,YACP8I,OAAOC,SAASC,UACQ,MAAf,KAAMH,OACf7I,EAAO,sCAbJ,KAAMA,QAEA,KAAMA,QAAQiJ,QAAQ,WACtB,KAAMjJ,QAAQiJ,QAAQ,SAC/BjJ,EAAO,YACE,KAAMA,QAAQiJ,QAAQ,WAC/BjJ,EAAO,yDALPA,EAAU,yCAgBdqI,GAAc,CACZH,MAAM,EACNlI,UACAmI,SAAU,UA/DD,yBAkEXV,GAAa,GAlEF,6EAAH,qDAsEZzE,qBAAU,WACR,sBAAC,4BAAA/P,EAAA,yDACMuC,GADN,uBAEG3B,QAAQC,IAAI,2BAFf,6BAKCD,QAAQC,IAAI,oBACR0B,GAAa0C,WACf2P,EAAarS,GAAa0C,YAcxB6N,EAAMtQ,eArBX,0CAuBwBF,YACjBC,GACAuQ,EAAMtQ,eACNsQ,EAAM/S,YA1Bb,cAuBWkW,EAvBX,iBA4BWpB,EAAgBoB,GA5B3B,0DA8BKrV,QAAQC,IAAI,uCACZD,QAAQC,IAAR,MA/BL,gCAkCGD,QAAQC,IAAI,+CAlCf,yDAAD,KAqCC,CAAC0B,GAAcuQ,EAAMtQ,eAAgBsQ,EAAM/S,aAE9CgQ,qBAAU,WAAM,4CACd,gCAAA/P,EAAA,0DAEIiF,GAAS,OACTlC,QADS,IACTA,GADS,UACTA,EAAcE,MAAMmB,6BADX,QACT,EAA2CI,KAH/C,0CAOcsO,EAAM/S,WAAWmW,8BACrBjR,EACA,CAAET,KAAI,OAAEzB,QAAF,IAAEA,GAAF,UAAEA,EAAcE,MAAMmB,6BAAtB,aAAE,EAA2CI,OAT7D,cAMY2R,EANZ,yBAYaA,EAAYnV,MAAM,GAAG8B,QAAQX,KAAKiU,OAAOC,KAAKF,YAAYG,QAZvE,yDAca,GAdb,0DADc,uBAAC,WAAD,gCAoBdC,GAAiB3L,MAAK,SAAC4L,GAAa,IAAD,EAEwC,GADzEjC,EAAyBiC,GACT,OAAZzT,QAAY,IAAZA,GAAA,UAAAA,EAAcE,MAAMmB,6BAApB,SAA2CqS,eAAiBD,GAC9D1B,IAAqB,OAAZ/R,QAAY,IAAZA,GAAA,UAAAA,EAAcE,MAAMmB,6BAApB,eAA2CqS,cAActT,YAAa,KAC1E,OAAIJ,QAAJ,IAAIA,KAAcE,MAAMqB,OAC7BwQ,IAAqB,OAAZ/R,QAAY,IAAZA,OAAA,EAAAA,EAAcE,MAAMqB,MAAMnB,YAAa,QAIpD,OAAIJ,QAAJ,IAAIA,KAAcE,MAAMC,gBACtByR,EAAiB,OAAC5R,QAAD,IAACA,OAAD,EAACA,EAAcE,MAAMC,gBAGC,OAAzB,OAAZH,QAAY,IAAZA,OAAA,EAAAA,EAAcE,MAAMG,eACtBsR,EAAgB,GAEhBA,EAAe,OAAC3R,QAAD,IAACA,OAAD,EAACA,EAAcE,MAAMG,iBAGrC,CAACL,EAAckC,EAAW6N,EAAM/S,aAEnC,IAAM0T,GHjOD,SACL1Q,GACQ,IAAD,MACD2T,GAAO,IAAIhT,MAAOC,UAElBgT,EAAc,UAAGrH,YAAOrB,EAAkBE,kBAA5B,aAAG,EAAqCxK,UACtDiT,EAAY,UAAGtH,YAAOrB,EAAkBG,gBAA5B,aAAG,EAAmCzK,UAClDkT,EAAe,UAAGvH,YAAOf,EAAmBJ,kBAA7B,aAAG,EAAsCxK,UAK9D,OAA0B,IAAtB0J,EACKD,EAAMuG,MACJkD,GAAmBH,EAAOG,EAC5BzJ,EAAM0G,WAEb7F,EAAkBC,SAClByI,GACAC,GACAF,EAAOC,GACPD,EAAOE,EAEAxJ,EAAMyG,cAENzG,EAAMwG,QGwMDkD,GAEd,OACE,eAACzD,EAAA,EAAD,WACE,cAACA,EAAA,EAAD,CAAW0D,SAAS,KAAKjF,MAAO,CAAEoB,SAAU,YAA5C,SACE,cAACR,EAAA,EAAD,CACEZ,MAAO,CACLjB,QAAS,sBACTD,QAAS,OAETa,aAAc,GAEhB3D,UAAU,cAPZ,SASE,eAACkF,EAAA,EAAD,CAAMC,WAAS,EAAC3B,eAAe,gBAAgB0F,UAAU,SAAzD,UACE,cAAC,GAAD,CACEvD,MAAOA,GACP1Q,aAAcA,EACdqR,OAAQA,IAGV,gCACGX,KAAUrG,EAAMwG,SAAWtG,EAAgBM,kBAC1C,cAAC,EAAD,IAED6F,KAAUrG,EAAMyG,eACf5F,EAAkBL,kBAChB,cAAC,EAAD,IAEH6F,KAAUrG,EAAM0G,YACfvF,EAAmBX,kBACjB,cAAC,EAAD,KAGF6F,KAAUrG,EAAM0G,YAAc1G,EAAMyG,gBACpC,qCACGJ,KAAUrG,EAAMyG,eACf,sBAAK/F,UAAU,gCAAf,UACGwG,GAAyB,EACxB,6BAAKA,IAEL,qBAAKxG,UAAU,YAGjB,8BACE,oDAKN,eAACkF,EAAA,EAAD,CACEC,WAAS,EACT3B,eAAe,gBACfE,MAAM,gBAHR,UAKE,qBAAK1D,UAAU,YAAf,UACI2F,KAAUrG,EAAMyG,eAChBJ,KAAUrG,EAAM0G,cACI,OAAnB5Q,GAA4C,OAAjBuR,EAC1B,4BAAIA,EAAe,MAAQvR,IAE3B,mBAAG4K,UAAU,eAInB,qBAAKA,UAAU,WAAf,SACI2F,KAAUrG,EAAMwG,SAAWtG,EAAgBK,WAC3C8F,KAAUrG,EAAMyG,eAChBJ,KAAUrG,EAAM0G,WAChB,mCACGxP,GACC,8BAAIA,GAAJ,UAEA,mBAAGwJ,UAAU,cAIjB,QAOJ7J,GAAOuR,UAGP,cAACvB,GAAD,UACe,OAAZlR,QAAY,IAAZA,KAAcE,MAAMO,UAApB,OACCT,QADD,IACCA,KAAcE,MAAMkB,YACpBF,GAAOgB,WACPhB,GAAO+Q,gBACP,cAAC,IAAD,CACE/Q,OAAQ,CACNgB,UACEhB,GAAOgB,WACP,IAAIvF,YAAUF,KAEhBwV,gBAAiB/Q,GAAO+Q,iBAI1B3O,kBAAiB,OACftD,QADe,IACfA,GADe,UACfA,EAAcE,aADC,iBACf,EAAqBkB,kBADN,aACf,EAAiCkC,kBAGnC4Q,WAAY7C,EACZ8C,QAAS,CAAEC,eAAe,GAf5B,SAiBE,cAAC,EAAD,CACEpU,aAAcA,EACd+L,UAAWA,EACXD,OAAQA,OAIZ,cAAC,EAAD,CACE9L,aAAcA,EACd+L,UAAWA,EACXD,OAAQA,OAlCd,eAACkF,GAAD,qBAAuB,mBA8CrC,cAACqD,EAAA,EAAD,CACEnC,KAAME,GAAWF,KACjBoC,iBAAkB,IAClBC,QAAS,kBAAMlC,GAAc,2BAAKD,IAAN,IAAkBF,MAAM,MAHtD,SAKE,cAACsC,EAAA,EAAD,CACED,QAAS,kBAAMlC,GAAc,2BAAKD,IAAN,IAAkBF,MAAM,MACpDC,SAAUC,GAAWD,SAFvB,SAIGC,GAAWpI,gB,gFCpXhB0D,GAAQ+G,aAAY,CACxBC,QAAS,CACPC,KAAM,UAIJlV,GACF,IAAI/C,IAAYC,UAAUiY,+CAKxBtD,GAAUsD,gCACV5X,GAAa,IAAIN,IAAYmY,WAAWvD,IAExCwD,GAAgBC,SAASH,wSAAYI,2BAA6B,IA6KzDC,GAzKH,WACV,IAAMC,EAAWlD,mBAAQ,kBAAMmD,wBAVjBP,YAUyC,IAEjDQ,EAAUpD,mBACd,iBAAM,CACJqD,eACAC,eACAC,eACAC,kBAEF,IAGF,SAASC,IACMnD,SAASC,eAAe,sBAChCmD,UAAUC,OAAO,aACtB9X,QAAQC,IAAI,WAGd,OACE,gCACE,sBAAKyC,GAAG,qBAAqBwK,UAAU,aAAvC,UACE,qBAAKA,UAAU,0BAAf,SACE,qBAAK6K,IAAI,mBAAmBC,IAAI,GAAGzI,QAASqI,MAE9C,+BACE,6BACE,qBAAK1K,UAAU,kBAAkB6K,IAAI,gBAAgBC,IAAI,OAE3D,6BACE,mBAAGC,KAAK,UAAU1I,QAASqI,EAA3B,uBAIF,6BACE,mBAAGK,KAAK,UAAU1I,QAASqI,EAA3B,sBAIF,6BACE,mBAAGK,KAAK,UAAU1I,QAASqI,EAA3B,uBAIF,6BACE,mBAAGK,KAAK,UAAU1I,QAASqI,EAA3B,oBAIF,6BACE,sBAAK1K,UAAU,eAAf,UACE,mBAAG+K,KAAK,sBAAsBC,OAAO,SAASC,IAAI,aAAlD,SACE,qBAAKjL,UAAU,aAAa6K,IAAI,qBAAqBC,IAAI,OAE3D,mBAAGC,KAAK,sBAAsBC,OAAO,SAASC,IAAI,aAAlD,SACE,qBAAKjL,UAAU,aAAa6K,IAAI,qBAAqBC,IAAI,kBAMnE,qBAAK9K,UAAU,qBAAqBqC,QAASqI,EAA7C,SACE,qBAAKG,IAAI,kBAAkBC,IAAI,OAEjC,8BACE,sBAAK9K,UAAU,gBAAf,UACE,qBAAKA,UAAU,WAAW6K,IAAI,yBAAyBC,IAAI,KAC3D,mBAAG9K,UAAU,WAAW+K,KAAK,UAA7B,qBAGA,mBAAG/K,UAAU,WAAW+K,KAAK,UAA7B,oBAGA,mBAAG/K,UAAU,WAAW+K,KAAK,UAA7B,qBAGA,mBAAG/K,UAAU,WAAW+K,KAAK,UAA7B,kBAGA,sBAAK/K,UAAU,wBAAf,UACE,mBAAG+K,KAAK,+BAA+BC,OAAO,SAASC,IAAI,aAA3D,SACE,qBAAKjL,UAAU,aAAa6K,IAAI,qBAAqBC,IAAI,OAE3D,mBAAGC,KAAK,2BAA2BC,OAAO,SAASC,IAAI,aAAvD,SACE,qBAAKjL,UAAU,aAAa6K,IAAI,qBAAqBC,IAAI,eAKjE,sBAAK9K,UAAU,kBAAf,UACE,yBAAQA,UAAU,OAAOxK,GAAG,QAA5B,UACE,sBAAKwO,MAAO,CAAEjB,QAAS,mBAAvB,UACE,oBAAI/C,UAAU,yBACd,oBAAIA,UAAU,qBAAd,6CACA,oBAAGA,UAAU,OAAb,qCAC0B,uBAD1B,kHAKF,8BACE,cAACkL,GAAA,EAAD,CAAevI,MAAOA,GAAtB,SACE,cAACwI,GAAA,EAAD,CAAoBhB,SAAUA,EAA9B,SACE,cAACiB,GAAA,EAAD,CAAgBf,QAASA,EAASgB,aAAW,EAA7C,SACE,cAAC,IAAD,UACE,cAACC,GAAD,CACE5W,eAAgBA,GAChBzC,WAAYA,GACZoO,UAAW0J,GACXnC,UA9GJ,IA+GIrB,QAASA,kBASvB,qBAAK/Q,GAAG,QAAQwK,UAAU,YAA1B,SAEA,qBAAIA,UAAU,OAAd,sEAEA,uBAFA,4HAMA,sBAAKxK,GAAG,QAAQwK,UAAU,gBAA1B,UACE,oBAAIgE,MAAO,CAAEjB,QAAS,cAAe/C,UAAU,qBAA/C,+CACA,gCACE,oBAAIA,UAAU,qBAAd,uCACA,mBAAGA,UAAU,qBAAb,2CAGA,0BAGF,gCACE,oBAAIA,UAAU,qBAAd,+BACA,mBAAGA,UAAU,qBAAb,2OAIA,0BAGF,gCACE,oBAAIA,UAAU,qBAAd,mCACA,mBACAA,UAAU,qBADV,2LAIA,0BAGF,gCACE,oBAAIA,UAAU,qBAAd,0BACA,mBAAGA,UAAU,qBAAb,0IAKA,oCC7LGuL,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB3O,MAAK,YAAkD,IAA/C4O,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEF1E,SAASC,eAAe,SAM1B+D,M,oSCGa/J,G,KAJyB,IAAI7P,IAAYC,UACpD,+CAGoB,SAACsB,GACrB,GAAKA,EAIL,OAAO,IAAI0C,KAAwB,IAAnB1C,EAAMmC,cA0BXjB,GAvBU,IAAI8X,KAAKC,aAAa,QAAS,CACpDnI,MAAO,UACPoI,sBAAuB,EACvBC,sBAAuB,IAqBvB,IAAI1a,IAAYC,UAAU,iDAEf8G,EAAQ,IAAI/G,IAAYC,UACnC,+CAgBWsF,EAAa,uCAAG,WAC3BR,EACA4V,GAF2B,SAAApa,EAAA,sEAIdP,IAAYC,UAAU+E,mBACjC,CAAC2V,EAAM1V,WAAY3C,IAAiB2C,WAAYF,EAAKE,YACrDxC,GANyB,mFAAH,wDAUbuE,EAAgB,uCAAG,WAC9BJ,GAD8B,SAAArG,EAAA,sEAGjBP,IAAYC,UAAU+E,mBACjC,CAAC4B,EAAkB3B,WAAYtC,EAAOC,KAAK,WAC3CmE,GAL4B,mFAAH,sDAShBJ,EAAe,uCAAG,WAC7BnC,EACAoC,GAF6B,SAAArG,EAAA,sEAIhBP,IAAYC,UAAU+E,mBACjC,CACER,EAAOS,WACPtC,EAAOC,KAAK,WACZD,EAAOC,KAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAClCgE,EAAkB3B,YAEpB8B,GAX2B,mFAAH,0D","file":"static/js/main.fc8938ab.chunk.js","sourcesContent":["import * as anchor from '@project-serum/anchor';\r\n\r\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\r\nimport { SystemProgram } from '@solana/web3.js';\r\nimport { sendTransactions } from './connection';\r\n\r\nimport {\r\n  CIVIC,\r\n  getAtaForMint,\r\n  getNetworkExpire,\r\n  getNetworkToken,\r\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n} from './utils';\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n  'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\r\n);\r\n\r\ninterface CandyMachineState {\r\n  itemsAvailable: number;\r\n  itemsRedeemed: number;\r\n  itemsRemaining: number;\r\n  treasury: anchor.web3.PublicKey;\r\n  tokenMint: anchor.web3.PublicKey;\r\n  isSoldOut: boolean;\r\n  isActive: boolean;\r\n  goLiveDate: anchor.BN;\r\n  price: anchor.BN;\r\n  gatekeeper: null | {\r\n    expireOnUse: boolean;\r\n    gatekeeperNetwork: anchor.web3.PublicKey;\r\n  };\r\n  endSettings: null | [number, anchor.BN];\r\n  whitelistMintSettings: null | {\r\n    mode: any;\r\n    mint: anchor.web3.PublicKey;\r\n    presale: boolean;\r\n    discountPrice: null | anchor.BN;\r\n  };\r\n  hiddenSettings: null | {\r\n    name: string;\r\n    uri: string;\r\n    hash: Uint8Array;\r\n  };\r\n}\r\n\r\nexport interface CandyMachineAccount {\r\n  id: anchor.web3.PublicKey;\r\n  program: anchor.Program;\r\n  state: CandyMachineState;\r\n}\r\n\r\nexport const awaitTransactionSignatureConfirmation = async (\r\n  txid: anchor.web3.TransactionSignature,\r\n  timeout: number,\r\n  connection: anchor.web3.Connection,\r\n  commitment: anchor.web3.Commitment = 'recent',\r\n  queryStatus = false,\r\n): Promise<anchor.web3.SignatureStatus | null | void> => {\r\n  let done = false;\r\n  let status: anchor.web3.SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log('Rejecting for timeout...');\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log('REST null result for', txid, status);\r\n            } else if (status.err) {\r\n              console.log('REST error for', txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log('REST no confirmations for', txid, status);\r\n            } else {\r\n              console.log('REST confirmation for', txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log('REST connection error: txid', txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  if (connection._signatureSubscriptions[subId]) {\r\n    connection.removeSignatureListener(subId);\r\n  }\r\n  done = true;\r\n  console.log('Returning status', status);\r\n  return status;\r\n};\r\n\r\n/* export */ const createAssociatedTokenAccountInstruction = (\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey,\r\n) => {\r\n  const keys = [\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new anchor.web3.TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n};\r\n\r\nexport const getCandyMachineState = async (\r\n  anchorWallet: anchor.Wallet,\r\n  candyMachineId: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection,\r\n): Promise<CandyMachineAccount> => {\r\n  const provider = new anchor.Provider(connection, anchorWallet, {\r\n    preflightCommitment: 'recent',\r\n  });\r\n\r\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\r\n\r\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\r\n\r\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\r\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\r\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\r\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n\r\n  return {\r\n    id: candyMachineId,\r\n    program,\r\n    state: {\r\n      itemsAvailable,\r\n      itemsRedeemed,\r\n      itemsRemaining,\r\n      isSoldOut: itemsRemaining === 0,\r\n      isActive:\r\n        state.data.goLiveDate.toNumber() < new Date().getTime() / 1000 &&\r\n        (state.endSettings\r\n          ? state.endSettings.endSettingType.date\r\n            ? state.endSettings.number.toNumber() > new Date().getTime() / 1000\r\n            : itemsRedeemed < state.endSettings.number.toNumber()\r\n          : true),\r\n      goLiveDate: state.data.goLiveDate,\r\n      treasury: state.wallet,\r\n      tokenMint: state.tokenMint,\r\n      gatekeeper: state.data.gatekeeper,\r\n      endSettings: state.data.endSettings,\r\n      whitelistMintSettings: state.data.whitelistMintSettings,\r\n      hiddenSettings: state.data.hiddenSettings,\r\n      price: state.data.price,\r\n    },\r\n  };\r\n};\r\n\r\nconst getMasterEdition = async (\r\n  mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from('edition'),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getMetadata = async (\r\n  mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport const getCandyMachineCreator = async (\r\n  candyMachine: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\r\n    CANDY_MACHINE_PROGRAM,\r\n  );\r\n};\r\n\r\nexport const mintOneToken = async (\r\n  candyMachine: CandyMachineAccount,\r\n  payer: anchor.web3.PublicKey,\r\n): Promise<(string | undefined)[]> => {\r\n  const mint = anchor.web3.Keypair.generate();\r\n\r\n  const userTokenAccountAddress = (\r\n    await getAtaForMint(mint.publicKey, payer)\r\n  )[0];\r\n\r\n  const userPayingAccountAddress = candyMachine.state.tokenMint\r\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\r\n    : payer;\r\n\r\n  const candyMachineAddress = candyMachine.id;\r\n  const remainingAccounts = [];\r\n  const signers: anchor.web3.Keypair[] = [mint];\r\n  const cleanupInstructions = [];\r\n  const instructions = [\r\n    anchor.web3.SystemProgram.createAccount({\r\n      fromPubkey: payer,\r\n      newAccountPubkey: mint.publicKey,\r\n      space: MintLayout.span,\r\n      lamports:\r\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n          MintLayout.span,\r\n        ),\r\n      programId: TOKEN_PROGRAM_ID,\r\n    }),\r\n    Token.createInitMintInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      0,\r\n      payer,\r\n      payer,\r\n    ),\r\n    createAssociatedTokenAccountInstruction(\r\n      userTokenAccountAddress,\r\n      payer,\r\n      payer,\r\n      mint.publicKey,\r\n    ),\r\n    Token.createMintToInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      userTokenAccountAddress,\r\n      payer,\r\n      [],\r\n      1,\r\n    ),\r\n  ];\r\n\r\n  if (candyMachine.state.gatekeeper) {\r\n    remainingAccounts.push({\r\n      pubkey: (\r\n        await getNetworkToken(\r\n          payer,\r\n          candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n        )\r\n      )[0],\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    if (candyMachine.state.gatekeeper.expireOnUse) {\r\n      remainingAccounts.push({\r\n        pubkey: CIVIC,\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: (\r\n          await getNetworkExpire(\r\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n          )\r\n        )[0],\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n    }\r\n  }\r\n  if (candyMachine.state.whitelistMintSettings) {\r\n    const mint = new anchor.web3.PublicKey(\r\n      candyMachine.state.whitelistMintSettings.mint,\r\n    );\r\n\r\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\r\n    remainingAccounts.push({\r\n      pubkey: whitelistToken,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n\r\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\r\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\r\n\r\n      remainingAccounts.push({\r\n        pubkey: mint,\r\n        isWritable: true,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: whitelistBurnAuthority.publicKey,\r\n        isWritable: false,\r\n        isSigner: true,\r\n      });\r\n      signers.push(whitelistBurnAuthority);\r\n      const exists =\r\n        await candyMachine.program.provider.connection.getAccountInfo(\r\n          whitelistToken,\r\n        );\r\n      if (exists) {\r\n        instructions.push(\r\n          Token.createApproveInstruction(\r\n            TOKEN_PROGRAM_ID,\r\n            whitelistToken,\r\n            whitelistBurnAuthority.publicKey,\r\n            payer,\r\n            [],\r\n            1,\r\n          ),\r\n        );\r\n        cleanupInstructions.push(\r\n          Token.createRevokeInstruction(\r\n            TOKEN_PROGRAM_ID,\r\n            whitelistToken,\r\n            payer,\r\n            [],\r\n          ),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  if (candyMachine.state.tokenMint) {\r\n    const transferAuthority = anchor.web3.Keypair.generate();\r\n\r\n    signers.push(transferAuthority);\r\n    remainingAccounts.push({\r\n      pubkey: userPayingAccountAddress,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    remainingAccounts.push({\r\n      pubkey: transferAuthority.publicKey,\r\n      isWritable: false,\r\n      isSigner: true,\r\n    });\r\n\r\n    instructions.push(\r\n      Token.createApproveInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        userPayingAccountAddress,\r\n        transferAuthority.publicKey,\r\n        payer,\r\n        [],\r\n        candyMachine.state.price.toNumber(),\r\n      ),\r\n    );\r\n    cleanupInstructions.push(\r\n      Token.createRevokeInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        userPayingAccountAddress,\r\n        payer,\r\n        [],\r\n      ),\r\n    );\r\n  }\r\n  const metadataAddress = await getMetadata(mint.publicKey);\r\n  const masterEdition = await getMasterEdition(mint.publicKey);\r\n\r\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\r\n    candyMachineAddress,\r\n  );\r\n\r\n  instructions.push(\r\n    await candyMachine.program.instruction.mintNft(creatorBump, {\r\n      accounts: {\r\n        candyMachine: candyMachineAddress,\r\n        candyMachineCreator,\r\n        payer: payer,\r\n        wallet: candyMachine.state.treasury,\r\n        mint: mint.publicKey,\r\n        metadata: metadataAddress,\r\n        masterEdition,\r\n        mintAuthority: payer,\r\n        updateAuthority: payer,\r\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n        tokenProgram: TOKEN_PROGRAM_ID,\r\n        systemProgram: SystemProgram.programId,\r\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n        recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\r\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n      },\r\n      remainingAccounts:\r\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\r\n    }),\r\n  );\r\n\r\n  try {\r\n    return (\r\n      await sendTransactions(\r\n        candyMachine.program.provider.connection,\r\n        candyMachine.program.provider.wallet,\r\n        [instructions, cleanupInstructions],\r\n        [signers, []],\r\n      )\r\n    ).txs.map(t => t.txid);\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n\r\n  return [];\r\n};\r\n\r\nexport const shortenAddress = (address: string, chars = 4): string => {\r\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\r\n};\r\n\r\nconst sleep = (ms: number): Promise<void> => {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\n","import {\r\n  Keypair,\r\n  Commitment,\r\n  Connection,\r\n  RpcResponseAndContext,\r\n  SignatureStatus,\r\n  SimulatedTransactionResponse,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionSignature,\r\n  Blockhash,\r\n  FeeCalculator,\r\n} from '@solana/web3.js';\r\n\r\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\r\n\r\ninterface BlockhashAndFeeCalculator {\r\n  blockhash: Blockhash;\r\n  feeCalculator: FeeCalculator;\r\n}\r\n\r\nexport const getErrorForTransaction = async (\r\n  connection: Connection,\r\n  txid: string,\r\n) => {\r\n  // wait for all confirmation before geting transaction\r\n  await connection.confirmTransaction(txid, 'max');\r\n\r\n  const tx = await connection.getParsedConfirmedTransaction(txid);\r\n\r\n  const errors: string[] = [];\r\n  if (tx?.meta && tx.meta.logMessages) {\r\n    tx.meta.logMessages.forEach(log => {\r\n      const regex = /Error: (.*)/gm;\r\n      let m;\r\n      while ((m = regex.exec(log)) !== null) {\r\n        // This is necessary to avoid infinite loops with zero-width matches\r\n        if (m.index === regex.lastIndex) {\r\n          regex.lastIndex++;\r\n        }\r\n\r\n        if (m.length > 1) {\r\n          errors.push(m[1]);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport enum SequenceType {\r\n  Sequential,\r\n  Parallel,\r\n  StopOnFailure,\r\n}\r\n\r\nexport async function sendTransactionsWithManualRetry(\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[][],\r\n  signers: Keypair[][],\r\n): Promise<(string | undefined)[]> {\r\n  let stopPoint = 0;\r\n  let tries = 0;\r\n  let lastInstructionsLength = null;\r\n  let toRemoveSigners: Record<number, boolean> = {};\r\n  instructions = instructions.filter((instr, i) => {\r\n    if (instr.length > 0) {\r\n      return true;\r\n    } else {\r\n      toRemoveSigners[i] = true;\r\n      return false;\r\n    }\r\n  });\r\n  let ids: string[] = [];\r\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\r\n\r\n  while (stopPoint < instructions.length && tries < 3) {\r\n    instructions = instructions.slice(stopPoint, instructions.length);\r\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\r\n\r\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\r\n    else tries = 0;\r\n\r\n    try {\r\n      if (instructions.length === 1) {\r\n        const id = await sendTransactionWithRetry(\r\n          connection,\r\n          wallet,\r\n          instructions[0],\r\n          filteredSigners[0],\r\n          'single',\r\n        );\r\n        ids.push(id.txid);\r\n        stopPoint = 1;\r\n      } else {\r\n        const { txs } = await sendTransactions(\r\n          connection,\r\n          wallet,\r\n          instructions,\r\n          filteredSigners,\r\n          SequenceType.StopOnFailure,\r\n          'single',\r\n        );\r\n        ids = ids.concat(txs.map(t => t.txid));\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    console.log(\r\n      'Died on ',\r\n      stopPoint,\r\n      'retrying from instruction',\r\n      instructions[stopPoint],\r\n      'instructions length is',\r\n      instructions.length,\r\n    );\r\n    lastInstructionsLength = instructions.length;\r\n  }\r\n\r\n  return ids;\r\n}\r\n\r\nexport const sendTransactions = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructionSet: TransactionInstruction[][],\r\n  signersSet: Keypair[][],\r\n  sequenceType: SequenceType = SequenceType.Parallel,\r\n  commitment: Commitment = 'singleGossip',\r\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => { },\r\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\r\n  block?: BlockhashAndFeeCalculator,\r\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  const unsignedTxns: Transaction[] = [];\r\n\r\n  if (!block) {\r\n    block = await connection.getRecentBlockhash(commitment);\r\n  }\r\n\r\n  for (let i = 0; i < instructionSet.length; i++) {\r\n    const instructions = instructionSet[i];\r\n    const signers = signersSet[i];\r\n\r\n    if (instructions.length === 0) {\r\n      continue;\r\n    }\r\n\r\n    let transaction = new Transaction();\r\n    instructions.forEach(instruction => transaction.add(instruction));\r\n    transaction.recentBlockhash = block.blockhash;\r\n    transaction.setSigners(\r\n      // fee payed by the wallet owner\r\n      wallet.publicKey,\r\n      ...signers.map(s => s.publicKey),\r\n    );\r\n\r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n\r\n    unsignedTxns.push(transaction);\r\n  }\r\n\r\n  const signedTxns = await wallet.signAllTransactions(unsignedTxns);\r\n\r\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\r\n\r\n  let breakEarlyObject = { breakEarly: false, i: 0 };\r\n  console.log(\r\n    'Signed txns length',\r\n    signedTxns.length,\r\n    'vs handed in length',\r\n    instructionSet.length,\r\n  );\r\n  for (let i = 0; i < signedTxns.length; i++) {\r\n    const signedTxnPromise = sendSignedTransaction({\r\n      connection,\r\n      signedTransaction: signedTxns[i],\r\n    });\r\n\r\n    signedTxnPromise\r\n      .then(({ txid, slot }) => {\r\n        successCallback(txid, i);\r\n      })\r\n      .catch(reason => {\r\n        // @ts-ignore\r\n        failCallback(signedTxns[i], i);\r\n        if (sequenceType === SequenceType.StopOnFailure) {\r\n          breakEarlyObject.breakEarly = true;\r\n          breakEarlyObject.i = i;\r\n        }\r\n      });\r\n\r\n    if (sequenceType !== SequenceType.Parallel) {\r\n      try {\r\n        await signedTxnPromise;\r\n      } catch (e) {\r\n        console.log('Caught failure', e);\r\n        if (breakEarlyObject.breakEarly) {\r\n          console.log('Died on ', breakEarlyObject.i);\r\n          // Return the txn we failed on by index\r\n          return {\r\n            number: breakEarlyObject.i,\r\n            txs: await Promise.all(pendingTxns),\r\n          };\r\n        }\r\n      }\r\n    } else {\r\n      pendingTxns.push(signedTxnPromise);\r\n    }\r\n  }\r\n\r\n  if (sequenceType !== SequenceType.Parallel) {\r\n    await Promise.all(pendingTxns);\r\n  }\r\n\r\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\r\n};\r\n\r\nexport const sendTransaction = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[],\r\n  signers: Keypair[],\r\n  awaitConfirmation = true,\r\n  commitment: Commitment = 'singleGossip',\r\n  includesFeePayer: boolean = false,\r\n  block?: BlockhashAndFeeCalculator,\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction = new Transaction();\r\n  instructions.forEach(instruction => transaction.add(instruction));\r\n  transaction.recentBlockhash = (\r\n    block || (await connection.getRecentBlockhash(commitment))\r\n  ).blockhash;\r\n\r\n  if (includesFeePayer) {\r\n    transaction.setSigners(...signers.map(s => s.publicKey));\r\n  } else {\r\n    transaction.setSigners(\r\n      // fee payed by the wallet owner\r\n      wallet.publicKey,\r\n      ...signers.map(s => s.publicKey),\r\n    );\r\n  }\r\n\r\n  if (signers.length > 0) {\r\n    transaction.partialSign(...signers);\r\n  }\r\n  if (!includesFeePayer) {\r\n    transaction = await wallet.signTransaction(transaction);\r\n  }\r\n\r\n  const rawTransaction = transaction.serialize();\r\n  let options = {\r\n    skipPreflight: true,\r\n    commitment,\r\n  };\r\n\r\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\r\n  let slot = 0;\r\n\r\n  if (awaitConfirmation) {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n      txid,\r\n      DEFAULT_TIMEOUT,\r\n      connection,\r\n      commitment,\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n    slot = confirmation?.slot || 0;\r\n\r\n    if (confirmation?.err) {\r\n      const errors = await getErrorForTransaction(connection, txid);\r\n\r\n      console.log(errors);\r\n      throw new Error(`Raw transaction ${txid} failed`);\r\n    }\r\n  }\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const sendTransactionWithRetry = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[],\r\n  signers: Keypair[],\r\n  commitment: Commitment = 'singleGossip',\r\n  includesFeePayer: boolean = false,\r\n  block?: BlockhashAndFeeCalculator,\r\n  beforeSend?: () => void,\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction = new Transaction();\r\n  instructions.forEach(instruction => transaction.add(instruction));\r\n  transaction.recentBlockhash = (\r\n    block || (await connection.getRecentBlockhash(commitment))\r\n  ).blockhash;\r\n\r\n  if (includesFeePayer) {\r\n    transaction.setSigners(...signers.map(s => s.publicKey));\r\n  } else {\r\n    transaction.setSigners(\r\n      // fee payed by the wallet owner\r\n      wallet.publicKey,\r\n      ...signers.map(s => s.publicKey),\r\n    );\r\n  }\r\n\r\n  if (signers.length > 0) {\r\n    transaction.partialSign(...signers);\r\n  }\r\n  if (!includesFeePayer) {\r\n    transaction = await wallet.signTransaction(transaction);\r\n  }\r\n\r\n  if (beforeSend) {\r\n    beforeSend();\r\n  }\r\n\r\n  const { txid, slot } = await sendSignedTransaction({\r\n    connection,\r\n    signedTransaction: transaction,\r\n  });\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const getUnixTs = () => {\r\n  return new Date().getTime() / 1000;\r\n};\r\n\r\nconst DEFAULT_TIMEOUT = 15000;\r\n\r\nexport async function sendSignedTransaction({\r\n  signedTransaction,\r\n  connection,\r\n  timeout = DEFAULT_TIMEOUT,\r\n}: {\r\n  signedTransaction: Transaction;\r\n  connection: Connection;\r\n  sendingMessage?: string;\r\n  sentMessage?: string;\r\n  successMessage?: string;\r\n  timeout?: number;\r\n}): Promise<{ txid: string; slot: number }> {\r\n  const rawTransaction = signedTransaction.serialize();\r\n  const startTime = getUnixTs();\r\n  let slot = 0;\r\n  const txid: TransactionSignature = await connection.sendRawTransaction(\r\n    rawTransaction,\r\n    {\r\n      skipPreflight: true,\r\n    },\r\n  );\r\n\r\n  console.log('Started awaiting confirmation for', txid);\r\n\r\n  let done = false;\r\n  (async () => {\r\n    while (!done && getUnixTs() - startTime < timeout) {\r\n      connection.sendRawTransaction(rawTransaction, {\r\n        skipPreflight: true,\r\n      });\r\n      await sleep(500);\r\n    }\r\n  })();\r\n  try {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n      txid,\r\n      timeout,\r\n      connection,\r\n      'recent',\r\n      true,\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n\r\n    if (confirmation.err) {\r\n      console.error(confirmation.err);\r\n      throw new Error('Transaction failed: Custom instruction error');\r\n    }\r\n\r\n    slot = confirmation?.slot || 0;\r\n  } catch (err: any) {\r\n    console.error('Timeout Error caught', err);\r\n    if (err.timeout) {\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n    }\r\n    let simulateResult: SimulatedTransactionResponse | null = null;\r\n    try {\r\n      simulateResult = (\r\n        await simulateTransaction(connection, signedTransaction, 'single')\r\n      ).value;\r\n    } catch (e) { }\r\n    if (simulateResult && simulateResult.err) {\r\n      if (simulateResult.logs) {\r\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\r\n          const line = simulateResult.logs[i];\r\n          if (line.startsWith('Program log: ')) {\r\n            throw new Error(\r\n              'Transaction failed: ' + line.slice('Program log: '.length),\r\n            );\r\n          }\r\n        }\r\n      }\r\n      throw new Error(JSON.stringify(simulateResult.err));\r\n    }\r\n    // throw new Error('Transaction failed');\r\n  } finally {\r\n    done = true;\r\n  }\r\n\r\n  console.log('Latency', txid, getUnixTs() - startTime);\r\n  return { txid, slot };\r\n}\r\n\r\nasync function simulateTransaction(\r\n  connection: Connection,\r\n  transaction: Transaction,\r\n  commitment: Commitment,\r\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\r\n  // @ts-ignore\r\n  transaction.recentBlockhash = await connection._recentBlockhash(\r\n    // @ts-ignore\r\n    connection._disableBlockhashCaching,\r\n  );\r\n\r\n  const signData = transaction.serializeMessage();\r\n  // @ts-ignore\r\n  const wireTransaction = transaction._serialize(signData);\r\n  const encodedTransaction = wireTransaction.toString('base64');\r\n  const config: any = { encoding: 'base64', commitment };\r\n  const args = [encodedTransaction, config];\r\n\r\n  // @ts-ignore\r\n  const res = await connection._rpcRequest('simulateTransaction', args);\r\n  if (res.error) {\r\n    throw new Error('failed to simulate transaction: ' + res.error.message);\r\n  }\r\n  return res.result;\r\n}\r\n\r\nasync function awaitTransactionSignatureConfirmation(\r\n  txid: TransactionSignature,\r\n  timeout: number,\r\n  connection: Connection,\r\n  commitment: Commitment = 'recent',\r\n  queryStatus = false,\r\n): Promise<SignatureStatus | null | void> {\r\n  let done = false;\r\n  let status: SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log('Rejecting for timeout...');\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n    try {\r\n      subId = connection.onSignature(\r\n        txid,\r\n        (result, context) => {\r\n          done = true;\r\n          status = {\r\n            err: result.err,\r\n            slot: context.slot,\r\n            confirmations: 0,\r\n          };\r\n          if (result.err) {\r\n            console.log('Rejected via websocket', result.err);\r\n            reject(status);\r\n          } else {\r\n            console.log('Resolved via websocket', result);\r\n            resolve(status);\r\n          }\r\n        },\r\n        commitment,\r\n      );\r\n    } catch (e) {\r\n      done = true;\r\n      console.error('WS error in setup', txid, e);\r\n    }\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log('REST null result for', txid, status);\r\n            } else if (status.err) {\r\n              console.log('REST error for', txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log('REST no confirmations for', txid, status);\r\n            } else {\r\n              console.log('REST confirmation for', txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log('REST connection error: txid', txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  if (connection._signatureSubscriptions[subId])\r\n    connection.removeSignatureListener(subId);\r\n  done = true;\r\n  console.log('Returning status', status);\r\n  return status;\r\n}\r\nexport function sleep(ms: number): Promise<void> {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n","import * as anchor from \"@project-serum/anchor\";\r\nimport React from \"react\";\r\n\r\nimport {\r\n  WhitelistSettings,\r\n  PublicSaleSettings,\r\n  WelcomeSettings,\r\n} from \"./userSettingsInterfaces\";\r\n\r\nfunction date(date: string) {\r\n  let f = new anchor.BN(new Date(date).getTime() / 1000);\r\n  return f;\r\n}\r\n\r\n//\r\n// Below are settings that will trigger the UI of the mint box currently. This is a basic\r\n// implementation to start with but incorporates whitelist minting sales by turning on\r\n// the mint function between to dates. This will allow users to mint while the candy machine\r\n// is still in it's off state allowing minting via SLP tokens.\r\n//\r\n// You can play with the settings below and also the CMv2 start time setting to trigger different\r\n// the different UI modes.\r\n//\r\n//  This is the current UI set up below and the new phases.\r\n//\r\n//    Welcome\r\n//    Whitelist\r\n//    Public Minting\r\n//\r\n//    any settings you are not using need to be set as 'undefined' without quotetation marks\r\n//\r\n//         title: undefined\r\n//\r\n//    for dates use the following format\r\n//\r\n//        date('1 Jan 2020 00:00:00 <timezone>')\r\n//\r\n//\r\n//\r\n\r\nexport const mintPanic = {\r\n  enabled: false,\r\n  title: \"Minting Paused\",\r\n  desc: \"We have dectected and issue while minting. Standby for an update\",\r\n};\r\n\r\n///                             ///\r\n///      Welcome Settings       ///\r\n///                             ///\r\n\r\nexport const welcomeSettings: WelcomeSettings = {\r\n\r\n  //Title and Description\r\n  title: \"Welcome!\",\r\n  desc: \"Connect your wallet and load in! Whitelist mint starts soon!\",\r\n\r\n  // Countdown Timer\r\n  countdownEnable: false,\r\n  countdownTo: date(\"2 Jan 2022 00:00:00 GMT\"),\r\n  //Example date below\r\n  // date('29 2021 00:00:00 GMT')\r\n\r\n  // showprice\r\n  showPrice: false,\r\n\r\n  //Enable Custom HTML\r\n  enableCustomHTML: false,\r\n};\r\n\r\nexport class MintWelcomeCustomHTML extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"custom-mint-container\">\r\n        {/* Add Custom HTML code for Welcome Here! */}\r\n\r\n        \r\n        <p>Test 1</p>\r\n        \r\n        \r\n        {/* End */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n///                             ///\r\n///   Whitelist Sale Settings   ///\r\n///                             ///\r\n\r\n// The white list does NOTHING to the candy machine itself. It just enables the mint button\r\n// on the site so people can purchase as long as you have the SLP token's set up for you\r\n// whitelist. If your candy machine is not set up for SLP token whitelist purchasing then\r\n// all transations will fail, all transactions will fail for people who also do not hold the\r\n// SLP token. This also does not stop people minting directly from the program.\r\n\r\nexport const whitelistSettings: WhitelistSettings = {\r\n  //If you want to use the whitelist feature enable it.\r\n  enabled: true,\r\n\r\n  startDate: date(\"1 Jan 2022 00:00:00 GMT\"),\r\n  endDate: date(\"8 Jan 2022 00:00:00 GMT\"),\r\n  countdown: true,\r\n  //Example date below\r\n  // date('29 2021 00:00:00 GMT')\r\n\r\n  //Wallet Title and Description\r\n  title: \"White List\",\r\n  desc: undefined,\r\n\r\n  //Enable Custom HTML Below\r\n  enableCustomHTML: false,\r\n};\r\n\r\n\r\nexport class MintWhitelistCustomHTML extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"custom-mint-container\">\r\n        {/* Add Custom HTML code for Whitelist Stage Here! */}\r\n\r\n        \r\n        <p></p>\r\n        \r\n        \r\n        {/* End */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n///                             ///\r\n///     Public Sale Settings    ///\r\n///                             ///\r\n\r\nexport const publicSaleSettings: PublicSaleSettings = {\r\n  //start date and end date must match your Candy Machine Config for public launch!\r\n\r\n  startDate: date(\"7 Jan 2022 00:00:00 GMT\"),\r\n  endDate: undefined,\r\n  countdown: false,\r\n  //Example date below\r\n  // date('29 2021 00:00:00 GMT')\r\n\r\n  //Title and Description\r\n  title: \"PalmDAO SIM July\",\r\n  desc: \"Welcome Palm DAO Members  Mint Your SIM Cube Right Here  \",\r\n\r\n  //Enable Custom HTML\r\n  enableCustomHTML: false,\r\n};\r\n\r\nexport class MintPublicSaleCustomHTML extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"custom-mint-container\">\r\n        {/* Add Custom HTML code for Public Minting Here! */}\r\n\r\n        \r\n        <p></p>\r\n        \r\n        \r\n        {/* End */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import * as anchor from \"@project-serum/anchor\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { PhaseCountdown } from \"./countdown\";\r\nimport { toDate } from \"./utils\";\r\nimport { CandyMachineAccount } from \"./candy-machine\";\r\nimport { useWallet } from \"@solana/wallet-adapter-react\";\r\nimport {\r\n  publicSaleSettings,\r\n  whitelistSettings,\r\n  welcomeSettings,\r\n  mintPanic,\r\n} from \"./userSettings\";\r\nimport { Container } from \"@material-ui/core\";\r\n\r\nexport enum Phase {\r\n  AnticipationPhase, // FL, AKA Phase 0\r\n  SetPrice, // FL, AKA Phase 1\r\n  GracePeriod, // FL, AKA Phase 2\r\n  Lottery, // FL\r\n  RaffleFinished, // FL, AKA Phase 3\r\n  WaitForCM, // FL,\r\n  Phase4,\r\n  MintOff,\r\n  WhiteListMint,\r\n  PublicMint,\r\n  Welcome,\r\n  Panic,\r\n}\r\n\r\nexport function getPhase(\r\n  candyMachine: CandyMachineAccount | undefined\r\n): Phase {\r\n  const curr = new Date().getTime();\r\n  // const candyMachineGoLive = toDate(candyMachine?.state.goLiveDate)?.getTime();\r\n  const whiteListStart = toDate(whitelistSettings.startDate)?.getTime();\r\n  const whiteListEnd = toDate(whitelistSettings.endDate)?.getTime();\r\n  const publicSaleStart = toDate(publicSaleSettings.startDate)?.getTime();\r\n  // const publicSaleEnd = toDate(publicSaleSettings.endDate)?.getTime();\r\n\r\n  //Countdown, WhiteList Minting, Public Minting,\r\n\r\n  if (mintPanic.enabled === true) {\r\n    return Phase.Panic;\r\n  } else if (publicSaleStart && curr > publicSaleStart) {\r\n    return Phase.PublicMint;\r\n  } else if (\r\n    whitelistSettings.enabled &&\r\n    whiteListStart &&\r\n    whiteListEnd &&\r\n    curr > whiteListStart &&\r\n    curr < whiteListEnd\r\n  ) {\r\n    return Phase.WhiteListMint;\r\n  } else {\r\n    return Phase.Welcome;\r\n  }\r\n}\r\n\r\nconst Header = (props: {\r\n  phaseName: string;\r\n  desc: string | undefined;\r\n  date?: anchor.BN | undefined;\r\n  status?: string;\r\n  countdown?: boolean;\r\n  countdownEnable?: boolean;\r\n}) => {\r\n  const { phaseName, desc, date, status, countdownEnable } = props;\r\n  return (\r\n    <>\r\n      {countdownEnable === true && (\r\n        <Grid\r\n          container\r\n          style={{ position: \"absolute\", top: \"-30px\", left: \"0px\" }}\r\n        >\r\n          <Container style={{ justifyContent: \"center\" }}>\r\n            <PhaseCountdown\r\n              date={toDate(date)}\r\n              style={{ justifyContent: \"center\" }}\r\n              status={status || \"COMPLETE\"}\r\n            />\r\n          </Container>\r\n        </Grid>\r\n      )}\r\n      <Grid container className=\"mintHeader\" alignItems=\"center\">\r\n        <Grid>\r\n          <Typography\r\n            variant=\"h5\"\r\n            style={{ fontWeight: 600, textAlign: \"center\" }}\r\n            className=\"pb-2\"\r\n          >\r\n            {phaseName}\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n      {desc && (\r\n        <Typography className=\"pb-2\" variant=\"body1\" color=\"textSecondary\">\r\n          {desc}\r\n        </Typography>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\ntype PhaseHeaderProps = {\r\n  phase: Phase;\r\n\r\n  candyMachine?: CandyMachineAccount;\r\n \r\n  rpcUrl: string;\r\n};\r\n\r\nexport const PhaseHeader = ({\r\n  phase,\r\n  \r\n  candyMachine,\r\n \r\n  \r\n}: PhaseHeaderProps) => {\r\n  const wallet = useWallet();\r\n  console.log(\"D\", candyMachine);\r\n  console.log(\"Wallet\", wallet);\r\n\r\n  return (\r\n    <>\r\n      {phase === Phase.Panic && (\r\n        <Header phaseName={mintPanic.title} desc={mintPanic.desc} />\r\n      )}\r\n\r\n      {phase === Phase.Welcome && (\r\n        <Header\r\n          phaseName={welcomeSettings.title}\r\n          desc={welcomeSettings.desc}\r\n          date={welcomeSettings.countdownTo}\r\n          countdownEnable={welcomeSettings.countdownEnable}\r\n        />\r\n      )}\r\n\r\n      {phase === Phase.WhiteListMint && (\r\n        <>\r\n          <Header\r\n            phaseName={whitelistSettings.title}\r\n            desc={whitelistSettings.desc}\r\n            date={whitelistSettings.endDate}\r\n            countdownEnable={whitelistSettings.countdown}\r\n            status=\"WHITELIST LIVE\"\r\n          />\r\n        </>\r\n      )}\r\n\r\n      {phase === Phase.PublicMint && (\r\n        <>\r\n          <Header\r\n            phaseName={publicSaleSettings.title}\r\n            desc={publicSaleSettings.desc}\r\n            date={publicSaleSettings.endDate}\r\n            countdownEnable={publicSaleSettings.countdown}\r\n            status=\"LIVE\"\r\n          />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import styled from 'styled-components';\r\nimport Button from '@material-ui/core/Button';\r\nimport { CandyMachineAccount } from './candy-machine';\r\n\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\r\nimport { useEffect, useState } from 'react';\r\nimport { whitelistSettings, publicSaleSettings, mintPanic } from './userSettings';\r\nimport { toDate }  from './utils'\r\n\r\n\r\nexport const CTAButton = styled(Button)`\r\n  \r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`; // add your styles here\r\n\r\nexport const MintButton = ({\r\n  onMint,\r\n  candyMachine,\r\n  \r\n  isMinting,\r\n  \r\n  \r\n}: {\r\n  onMint: () => Promise<void>;\r\n  candyMachine: CandyMachineAccount | undefined;\r\n  \r\n  isMinting: boolean;\r\n \r\n}) => {\r\n  const { requestGatewayToken, gatewayStatus } = useGateway();\r\n  const [clicked, setClicked] = useState(false);\r\n  const whitelistStartDate = toDate(whitelistSettings.startDate)?.getTime();\r\n  const whitelistEndDate = toDate(whitelistSettings.endDate)?.getTime();\r\n  const publicMintStart = toDate(publicSaleSettings.startDate)?.getTime();\r\n  const publicMintEnd = toDate(publicSaleSettings.endDate)?.getTime();\r\n\r\n  function whiteListSaleCheck() {\r\n    if (whitelistSettings.enabled && (whitelistStartDate && whitelistEndDate ) && Date.now() > whitelistStartDate && Date.now() < whitelistEndDate) {\r\n      \r\n      return true\r\n    } else {\r\n      \r\n      return false\r\n    }\r\n  }\r\n  \r\n  let WhitelistMintActive = whiteListSaleCheck()\r\n  console.log('is Whitelist Sale Active? ' + whiteListSaleCheck())\r\n\r\n  function publicSaleCheck() {\r\n\r\n    if (publicMintStart && publicMintEnd){\r\n      if(Date.now() > publicMintStart && Date.now() < publicMintEnd){\r\n        return true\r\n      } else {\r\n        return false\r\n      }\r\n    }\r\n    else if (publicMintStart) {\r\n      if (Date.now() > publicMintStart){\r\n        return true\r\n      } else {\r\n        return false\r\n      }\r\n    \r\n    }\r\n\r\n\r\n  }\r\n\r\n  let PublicMintActive = publicSaleCheck()\r\n\r\n  console.log('is public sale live? '+ publicSaleCheck())\r\n  \r\n  console.log(candyMachine?.state.isSoldOut, isMinting, (WhitelistMintActive || PublicMintActive) ,!candyMachine?.state.isActive)\r\n\r\n  useEffect(() => {\r\n    if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\r\n      console.log('Minting');\r\n      onMint();\r\n      setClicked(false);\r\n    }\r\n  }, [gatewayStatus, clicked, setClicked, onMint]);\r\n  return (\r\n    <CTAButton\r\n      className='minting-button'\r\n      disabled={\r\n        candyMachine?.state.isSoldOut ||\r\n        isMinting ||\r\n        mintPanic.enabled ||\r\n        !(WhitelistMintActive || PublicMintActive)\r\n        \r\n\r\n      }\r\n      onClick={async () => {\r\n        setClicked(true);\r\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\r\n          console.log('gatekeeper active')\r\n          if (gatewayStatus === GatewayStatus.ACTIVE) {\r\n            console.log(gatewayStatus + GatewayStatus.ACTIVE)\r\n            setClicked(true);\r\n          } else {\r\n            console.log('requeting token')\r\n             let token = await requestGatewayToken();\r\n            console.log(token);\r\n          }\r\n        } else {\r\n          await onMint();\r\n          setClicked(false);\r\n        }\r\n      }}\r\n      variant=\"contained\"\r\n    >\r\n      <div className='mint-button-text'>\r\n      {candyMachine?.state.isSoldOut ? (\r\n        'SOLD OUT'\r\n      ) : isMinting ? (\r\n        <CircularProgress />\r\n      \r\n      ) : mintPanic.enabled ? (\r\n\r\n        'Mint Paused'\r\n\r\n      ) :  (\r\n        'MINT'\r\n      )}\r\n      </div>\r\n    </CTAButton>\r\n  );\r\n};","import { Paper } from '@material-ui/core';\r\nimport Countdown from 'react-countdown';\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport { useState } from 'react';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n      padding: theme.spacing(0),\r\n      '& > *': {\r\n        margin: theme.spacing(0.5),\r\n        marginRight: 0,\r\n        width: theme.spacing(6),\r\n        height: theme.spacing(6),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignContent: 'center',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        background: '#384457',\r\n        color: 'white',\r\n        borderRadius: 5,\r\n        fontSize: 10,\r\n      },\r\n    },\r\n    done: {\r\n      display: 'flex',\r\n      margin: theme.spacing(1),\r\n      marginRight: 0,\r\n      padding: theme.spacing(1),\r\n      flexDirection: 'column',\r\n      alignContent: 'center',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      background: '#384457',\r\n      color: 'white',\r\n      borderRadius: 5,\r\n      fontWeight: 'bold',\r\n      fontSize: 12,\r\n    },\r\n    item: {\r\n      fontWeight: 'bold',\r\n      fontSize: 12,\r\n    }\r\n  }),\r\n);\r\n\r\n\r\ninterface PhaseCountdownProps {\r\n  date: Date | undefined;\r\n  style?: React.CSSProperties;\r\n  status?: string;\r\n  onComplete?: () => void;\r\n  start?: Date;\r\n  end?: Date;\r\n}\r\n\r\ninterface CountdownRender {\r\n  days: number;\r\n  hours: number;\r\n  minutes: number;\r\n  seconds: number;\r\n  completed: boolean;\r\n}\r\n\r\nexport const PhaseCountdown: React.FC<PhaseCountdownProps> = ({\r\n  date,\r\n  status,\r\n  style,\r\n  start,\r\n  end,\r\n  onComplete,\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  const [isFixed, setIsFixed] = useState(start && end && date ? start.getTime() - Date.now() < 0 : false);\r\n\r\n  const renderCountdown = ({ days, hours, minutes, seconds, completed }: CountdownRender) => {\r\n    hours += days * 24\r\n    if (completed) {\r\n      return status ? <span className={classes.done}  >{status}</span> : null;\r\n    } else {\r\n      return (\r\n        <div className={classes.root} style={style} >\r\n          {isFixed && <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              +\r\n            </span>\r\n          </Paper>}\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {hours < 10 ? `0${hours}` : hours}\r\n            </span>\r\n            <span>hrs</span>\r\n          </Paper>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {minutes < 10 ? `0${minutes}` : minutes}\r\n            </span>\r\n            <span>mins</span>\r\n          </Paper>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {seconds < 10 ? `0${seconds}` : seconds}\r\n            </span>\r\n            <span>secs</span>\r\n          </Paper>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  if (date && start && end) {\r\n    if (isFixed) {\r\n      <Countdown\r\n        date={start}\r\n        now={() => end.getTime()}\r\n        onComplete={() => setIsFixed(false)}\r\n        renderer={renderCountdown}\r\n      />\r\n    }\r\n  }\r\n\r\n  if (date) {\r\n    return (\r\n      <Countdown\r\n        date={date}\r\n        onComplete={onComplete}\r\n        renderer={renderCountdown}\r\n      />\r\n    )\r\n  } else {\r\n    return null\r\n  }\r\n}\r\n","import { useEffect, useMemo, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Container, Snackbar } from \"@material-ui/core\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\nimport * as anchor from \"@project-serum/anchor\";\r\n\r\nimport { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { useWallet } from \"@solana/wallet-adapter-react\";\r\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\r\n\r\nimport {\r\n  awaitTransactionSignatureConfirmation,\r\n  CandyMachineAccount,\r\n  CANDY_MACHINE_PROGRAM,\r\n  getCandyMachineState,\r\n  mintOneToken,\r\n} from \"./candy-machine\";\r\n\r\nimport { AlertState } from \"./utils\";\r\nimport { MintButton } from \"./MintButton\";\r\nimport { getPhase, Phase, PhaseHeader } from \"./PhaseHeader\";\r\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\r\nimport {\r\n  whitelistSettings,\r\n  publicSaleSettings,\r\n  welcomeSettings,\r\n  MintWelcomeCustomHTML,\r\n  MintWhitelistCustomHTML,\r\n  MintPublicSaleCustomHTML,\r\n} from \"./userSettings\";\r\n\r\nconst ConnectButton = styled(WalletDialogButton)`\r\n  position: absolute;\r\n  left: 0px;\r\n  bottom: -15px;\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  transform: translate(0%, -50%);\r\n`;\r\n\r\nconst MintContainer = styled.div`\r\n  position: absolute;\r\n  width: 100%;\r\n  left: 0px;\r\n  bottom: 15px;\r\n`; // add your styles here\r\n\r\nexport interface HomeProps {\r\n  candyMachineId?: anchor.web3.PublicKey;\r\n\r\n  connection: anchor.web3.Connection;\r\n  startDate: number;\r\n  txTimeout: number;\r\n  rpcHost: string;\r\n}\r\n\r\nconst Home = (props: HomeProps) => {\r\n  // const [yourSOLBalance, setYourSOLBalance] = useState<number | null>(null);\r\n  const rpcUrl = props.rpcHost;\r\n  const [whiteListTokenBalance, setWhiteListTokenBalance] = useState<number>(0);\r\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\r\n  const [mintingTotal, setMintingTotal] = useState<number | null>(null);\r\n  const [itemsAvailable, setItemsAvailable] = useState<number | null>(null);\r\n  const [publicKey, setPublicKey] = useState<PublicKey>();\r\n\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\r\n\r\n  const [price, setPrice] = useState<number | null>(null);\r\n\r\n  const wallet = useWallet();\r\n\r\n  const anchorWallet = useMemo(() => {\r\n    if (\r\n      !wallet ||\r\n      !wallet.publicKey ||\r\n      !wallet.signAllTransactions ||\r\n      !wallet.signTransaction\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    return {\r\n      publicKey: wallet.publicKey,\r\n      signAllTransactions: wallet.signAllTransactions,\r\n      signTransaction: wallet.signTransaction,\r\n    } as anchor.Wallet;\r\n  }, [wallet]);\r\n\r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: \"\",\r\n    severity: undefined,\r\n  });\r\n\r\n  const onMint = async () => {\r\n    try {\r\n      setIsMinting(true);\r\n      document.getElementById(\"#identity\")?.click();\r\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\r\n        const mintTxId = (\r\n          await mintOneToken(candyMachine, wallet.publicKey)\r\n        )[0];\r\n\r\n        let status: any = { err: true };\r\n        if (mintTxId) {\r\n          status = await awaitTransactionSignatureConfirmation(\r\n            mintTxId,\r\n            props.txTimeout,\r\n            props.connection,\r\n            \"singleGossip\",\r\n            true\r\n          );\r\n        }\r\n\r\n        if (!status?.err) {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Congratulations! Mint succeeded!\",\r\n            severity: \"success\",\r\n          });\r\n\r\n          setMintingTotal(mintingTotal! + 1);\r\n\r\n          if (whiteListTokenBalance && whiteListTokenBalance > 0)\r\n            setWhiteListTokenBalance(whiteListTokenBalance - 1);\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Mint failed! Please try again!\",\r\n            severity: \"error\",\r\n          });\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      // TODO: blech:\r\n      let message = error.msg || \"Minting failed! Please try again!\";\r\n      if (!error.msg) {\r\n        if (!error.message) {\r\n          message = \"Transaction Timeout! Please try again.\";\r\n        } else if (error.message.indexOf(\"0x138\")) {\r\n        } else if (error.message.indexOf(\"0x137\")) {\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf(\"0x135\")) {\r\n          message = `Insufficient funds to mint. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          message = `SOLD OUT!`;\r\n          window.location.reload();\r\n        } else if (error.code === 312) {\r\n          message = `Minting period hasn't started yet.`;\r\n        }\r\n      }\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: \"error\",\r\n      });\r\n    } finally {\r\n      setIsMinting(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (!anchorWallet) {\r\n        console.log(\"anchor wallet not found\");\r\n        return;\r\n      }\r\n      console.log(\"wallet connected\");\r\n      if (anchorWallet.publicKey) {\r\n        setPublicKey(anchorWallet.publicKey)\r\n      }\r\n\r\n      // try {\r\n      //   const balance = await props.connection.getBalance(\r\n      //     anchorWallet.publicKey\r\n      //   );\r\n      //   console.log(\"Sol balance is: \" + balance);\r\n      //   setYourSOLBalance(balance);\r\n      // } catch (e) {\r\n      //   console.log(\"Problem getting fair launch state\");\r\n      //   console.log(e);\r\n      // }\r\n\r\n      if (props.candyMachineId) {\r\n        try {\r\n          const cndy = await getCandyMachineState(\r\n            anchorWallet,\r\n            props.candyMachineId,\r\n            props.connection\r\n          );\r\n          await setCandyMachine(cndy);\r\n        } catch (e) {\r\n          console.log(\"Problem getting candy machine state\");\r\n          console.log(e);\r\n        }\r\n      } else {\r\n        console.log(\"No candy machine detected in configuration.\");\r\n      }\r\n    })();\r\n  }, [anchorWallet, props.candyMachineId, props.connection]);\r\n\r\n  useEffect(() => {\r\n    async function getTokenAmount() {\r\n      if (\r\n        publicKey &&\r\n        candyMachine?.state.whitelistMintSettings?.mint\r\n      ) {\r\n        try {\r\n          const tokenAmount =\r\n            await props.connection.getParsedTokenAccountsByOwner(\r\n              publicKey,\r\n              { mint: candyMachine?.state.whitelistMintSettings?.mint }\r\n            );\r\n\r\n          return tokenAmount.value[0].account.data.parsed.info.tokenAmount.amount\r\n        } catch {\r\n          return 0\r\n        }\r\n      }\r\n    }\r\n\r\n    getTokenAmount().then((wlToken) => {\r\n      setWhiteListTokenBalance(wlToken);\r\n      if (candyMachine?.state.whitelistMintSettings?.discountPrice && wlToken) {\r\n        setPrice(candyMachine?.state.whitelistMintSettings?.discountPrice.toNumber() / 1000000000);\r\n      } else if (candyMachine?.state.price) {\r\n        setPrice(candyMachine?.state.price.toNumber() / 1000000000);\r\n      }\r\n    })\r\n\r\n    if (candyMachine?.state.itemsAvailable) {\r\n      setItemsAvailable(candyMachine?.state.itemsAvailable);\r\n    }\r\n\r\n    if (candyMachine?.state.itemsRedeemed == null) {\r\n      setMintingTotal(0);\r\n    } else {\r\n      setMintingTotal(candyMachine?.state.itemsRedeemed);\r\n    }\r\n\r\n  }, [candyMachine, publicKey, props.connection]);\r\n\r\n  const phase = getPhase(candyMachine);\r\n\r\n  return (\r\n    <Container>\r\n      <Container maxWidth=\"xs\" style={{ position: \"relative\" }}>\r\n        <Paper\r\n          style={{\r\n            padding: \"34px 24px 90px 24px\",\r\n            display: \"flex\",\r\n\r\n            borderRadius: 6,\r\n          }}\r\n          className=\"minting-box\"\r\n        >\r\n          <Grid container justifyContent=\"space-between\" direction=\"column\">\r\n            <PhaseHeader\r\n              phase={phase}\r\n              candyMachine={candyMachine}\r\n              rpcUrl={rpcUrl}\r\n            />\r\n\r\n            <div>\r\n              {phase === Phase.Welcome && welcomeSettings.enableCustomHTML && (\r\n                <MintWelcomeCustomHTML />\r\n              )}\r\n              {phase === Phase.WhiteListMint &&\r\n                whitelistSettings.enableCustomHTML && (\r\n                  <MintWhitelistCustomHTML />\r\n                )}\r\n              {phase === Phase.PublicMint &&\r\n                publicSaleSettings.enableCustomHTML && (\r\n                  <MintPublicSaleCustomHTML />\r\n                )}\r\n\r\n              {(phase === Phase.PublicMint || Phase.WhiteListMint) && (\r\n                <>\r\n                  {phase === Phase.WhiteListMint && (\r\n                    <div className=\"card minting-info text-center\">\r\n                      {whiteListTokenBalance >= 0 ? (\r\n                        <h1>{whiteListTokenBalance}</h1>\r\n                      ) : (\r\n                        <div className=\"loading\"></div>\r\n                      )}\r\n\r\n                      <div>\r\n                        <p>Mints to Claim</p>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  <Grid\r\n                    container\r\n                    justifyContent=\"space-between\"\r\n                    color=\"textSecondary\"\r\n                  >\r\n                    <div className=\"test-stat\">\r\n                      {(phase === Phase.WhiteListMint ||\r\n                        phase === Phase.PublicMint) &&\r\n                        (itemsAvailable !== null && mintingTotal !== null ? (\r\n                          <p>{mintingTotal + \" / \" + itemsAvailable}</p>\r\n                        ) : (\r\n                          <p className=\"loading\"></p>\r\n                        ))}\r\n                    </div>\r\n\r\n                    <div className=\"text-end\">\r\n                      {(phase === Phase.Welcome && welcomeSettings.showPrice) ||\r\n                        phase === Phase.WhiteListMint ||\r\n                        phase === Phase.PublicMint ? (\r\n                        <>\r\n                          {price ? (\r\n                            <p>{price} Sol</p>\r\n                          ) : (\r\n                            <p className=\"loading\"></p>\r\n                          )}\r\n                        </>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n\r\n                      {/* {formatSol(yourSOLBalance || 0).toLocaleString()} SOL */}\r\n                    </div>\r\n                  </Grid>\r\n\r\n                  {!wallet.connected ? (\r\n                    <ConnectButton>Connect{\"\"}</ConnectButton>\r\n                  ) : (\r\n                    <MintContainer>\r\n                      {candyMachine?.state.isActive &&\r\n                        candyMachine?.state.gatekeeper &&\r\n                        wallet.publicKey &&\r\n                        wallet.signTransaction ? (\r\n                        <GatewayProvider\r\n                          wallet={{\r\n                            publicKey:\r\n                              wallet.publicKey ||\r\n                              new PublicKey(CANDY_MACHINE_PROGRAM),\r\n                            //@ts-ignore\r\n                            signTransaction: wallet.signTransaction,\r\n                          }}\r\n                          // // Replace with following when added\r\n                          // gatekeeperNetwork={candyMachine.state.gatekeeper_network}\r\n                          gatekeeperNetwork={\r\n                            candyMachine?.state?.gatekeeper?.gatekeeperNetwork\r\n                          } // This is the ignite (captcha) network\r\n                          /// Don't need this for mainnet\r\n                          clusterUrl={rpcUrl}\r\n                          options={{ autoShowModal: false }}\r\n                        >\r\n                          <MintButton\r\n                            candyMachine={candyMachine}\r\n                            isMinting={isMinting}\r\n                            onMint={onMint}\r\n                          />\r\n                        </GatewayProvider>\r\n                      ) : (\r\n                        <MintButton\r\n                          candyMachine={candyMachine}\r\n                          isMinting={isMinting}\r\n                          onMint={onMint}\r\n                        />\r\n                      )}\r\n                    </MintContainer>\r\n                  )}\r\n                </>\r\n              )}\r\n            </div>\r\n          </Grid>\r\n        </Paper>\r\n      </Container>\r\n\r\n      <Snackbar\r\n        open={alertState.open}\r\n        autoHideDuration={6000}\r\n        onClose={() => setAlertState({ ...alertState, open: false })}\r\n      >\r\n        <Alert\r\n          onClose={() => setAlertState({ ...alertState, open: false })}\r\n          severity={alertState.severity}\r\n        >\r\n          {alertState.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import \"./App.css\";\r\nimport { useMemo } from \"react\";\r\n\r\nimport Minter from \"./Minter\";\r\n\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport { clusterApiUrl } from \"@solana/web3.js\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\nimport {\r\n  getPhantomWallet,\r\n  getSolflareWallet,\r\n  getSolletWallet,\r\n  getMathWallet,\r\n} from \"@solana/wallet-adapter-wallets\";\r\n\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n} from \"@solana/wallet-adapter-react\";\r\n\r\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\r\nimport { ThemeProvider, createTheme } from \"@material-ui/core\";\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n  },\r\n});\r\n\r\nconst candyMachineId = process.env.REACT_APP_CANDY_MACHINE_ID\r\n  ? new anchor.web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_ID)\r\n  : undefined;\r\n\r\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\r\n\r\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\r\nconst connection = new anchor.web3.Connection(rpcHost);\r\n\r\nconst startDateSeed = parseInt(process.env.REACT_APP_CANDY_START_DATE!, 10);\r\n\r\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\r\n\r\nconst App = () => {\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n  const wallets = useMemo(\r\n    () => [\r\n      getPhantomWallet(),\r\n      getSolflareWallet(),\r\n      getSolletWallet(),\r\n      getMathWallet(),\r\n    ],\r\n    []\r\n  );\r\n\r\n  function toggleMenu() {\r\n    const menu = document.getElementById(\"mobileNavContainer\")!;\r\n    menu.classList.toggle(\"open-menu\");\r\n    console.log(\"pressed\");\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"mobileNavContainer\" className=\"mobile-nav\">\r\n        <div className=\"mobile-nav-close-button\">\r\n          <img src=\"/icons/close.svg\" alt=\"\" onClick={toggleMenu} />\r\n        </div>\r\n        <ul>\r\n          <li>\r\n            <img className=\"mobile-nav-logo\" src=\"/img/logo.png\" alt=\"\" />\r\n          </li>\r\n          <li>\r\n            <a href=\"/#link1\" onClick={toggleMenu}>\r\n            PalmDAO\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"/#link2\" onClick={toggleMenu}>\r\n              Solana\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"/#link3\" onClick={toggleMenu}>\r\n              Instant\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"/#link4\" onClick={toggleMenu}>\r\n              Mint\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <div className=\"social-icons\">\r\n              <a href=\"https://twitter.com\" target=\"_blank\" rel=\"noreferrer\">\r\n                <img className=\"nav-social\" src=\"/icons/twitter.svg\" alt=\"\" />\r\n              </a>\r\n              <a href=\"https://discord.com\" target=\"_blank\" rel=\"noreferrer\">\r\n                <img className=\"nav-social\" src=\"/icons/discord.svg\" alt=\"\" />\r\n              </a>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div className=\"mobile-menu-button\" onClick={toggleMenu}>\r\n        <img src=\"/icons/menu.svg\" alt=\"\" />\r\n      </div>\r\n      <nav>\r\n        <div className=\"nav-container\">\r\n          <img className=\"nav-logo\" src=\"palmdaosimjulycube.gif\" alt=\"\" />\r\n          <a className=\"hide-800\" href=\"/#link1\">\r\n            PalmDAO\r\n          </a>\r\n          <a className=\"hide-800\" href=\"/#link2\">\r\n            Solana\r\n          </a>\r\n          <a className=\"hide-800\" href=\"/#link3\">\r\n            Instant\r\n          </a>\r\n          <a className=\"hide-800\" href=\"/#link4\">\r\n            Mint\r\n          </a>\r\n          <div className=\"social-icons hide-800\">\r\n            <a href=\"https://twitter.com/PalmDAO_\" target=\"_blank\" rel=\"noreferrer\">\r\n              <img className=\"nav-social\" src=\"/icons/twitter.svg\" alt=\"\" />\r\n            </a>\r\n            <a href=\"https://discord.com/soon\" target=\"_blank\" rel=\"noreferrer\">\r\n              <img className=\"nav-social\" src=\"/icons/discord.svg\" alt=\"\" />\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n      <div className=\"content-wrapper\">\r\n        <header className=\"card\" id=\"link1\">\r\n          <div style={{ padding: \"0 24px 0 24px 0\" }}>\r\n            <h3 className=\"text-secondary-color\"></h3>\r\n            <h1 className=\"text-primary-color\">⚔ PalmDAO SIM July ⚔ </h1>\r\n            <p className=\"pb-3\">\r\n              MUST BE A PALM DAO USER <br></br> SOLANA INSTANT MINT IS AN AUTOMATED SOLANA NFT CHECKOUT ENGINE THAT GENERATES PASSIVE INCOME FOR MEMBERS\r\n              \r\n            </p>\r\n          </div>\r\n          <div>\r\n            <ThemeProvider theme={theme}>\r\n              <ConnectionProvider endpoint={endpoint}>\r\n                <WalletProvider wallets={wallets} autoConnect>\r\n                  <WalletDialogProvider>\r\n                    <Minter\r\n                      candyMachineId={candyMachineId}\r\n                      connection={connection}\r\n                      startDate={startDateSeed}\r\n                      txTimeout={txTimeout}\r\n                      rpcHost={rpcHost}\r\n                    />\r\n                  </WalletDialogProvider>\r\n                </WalletProvider>\r\n              </ConnectionProvider>\r\n            </ThemeProvider>\r\n          </div>\r\n        </header>\r\n\r\n        <div id=\"link2\" className=\"container\">\r\n      \r\n        <h1 className=\"pb-3\"> \r\n        Previous SIM Success: 100+ Enviros, 20+ Lofts, 15+ Zillaz\r\n        <br></br>\r\n        SIM Renovation Testing: 8 Okay Bears, 5 Dead Rejects, 6 Mining Labs, 777 Junkies, 11 Baked Bots, Planetarians & More</h1>\r\n        </div>\r\n\r\n        <div id=\"link4\" className=\"container faq\">\r\n          <h1 style={{ padding: \"0 0 24px 0\" }}className=\"text-primary-color\">Solana Instant Mint FAQ / Details</h1>\r\n          <div> \r\n            <h4 className=\"text-primary-color\">Price / Expiration / Days</h4>\r\n            <p className=\"text-primary-color\">2 SOLANA / 30 DAYS / 50 SPOTS\r\n            </p>\r\n\r\n            <hr />\r\n          </div>\r\n\r\n          <div>\r\n            <h4 className=\"text-primary-color\">Mint Capabilities</h4>\r\n            <p className=\"text-primary-color\">Any Solana NFT you want will be attempted to mint with the best minting softwares / RPCs \r\n            And sometimes will run free sol drops that are near sell out as well without even needing to fill form (only if free and profitable)\r\n            </p>\r\n\r\n            <hr />\r\n          </div>\r\n\r\n          <div>\r\n            <h4 className=\"text-primary-color\">What To Do After Mint</h4>\r\n            <p\r\n            className=\"text-primary-color\">Fill Form (Will be sent to minters) With Needed Information ONLY After Mint : Discord ID , PrivateKey Wallet 1 , Public KeyWallet 1 , PrivateKey Wallet 2, PublicKey Wallet 2\r\n            </p>\r\n\r\n            <hr />\r\n          </div>\r\n\r\n          <div>\r\n            <h4 className=\"text-primary-color\"> Marketplace</h4>\r\n            <p className=\"text-primary-color\">\r\n            Will Be On Marketplaces In Order To Sell SIM keys (terminates at EOM)\r\nSolport , Magic Eden , Cubist , Etc ASAP When Sold Out\r\n            </p>\r\n\r\n            <hr />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './userCSS.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import * as anchor from '@project-serum/anchor';\r\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\r\nimport { SystemProgram } from '@solana/web3.js';\r\nimport {\r\n  LAMPORTS_PER_SOL,\r\n  SYSVAR_RENT_PUBKEY,\r\n  TransactionInstruction,\r\n} from '@solana/web3.js';\r\n\r\nexport interface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\r\n}\r\n\r\nexport const FAIR_LAUNCH_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  'faircnAB9k59Y4TXmLabBULeuTLgV7TkGMGNkjnA15j',\r\n);\r\n\r\nexport const toDate = (value?: anchor.BN) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n\r\n  return new Date(value.toNumber() * 1000);\r\n};\r\n\r\nconst numberFormater = new Intl.NumberFormat('en-US', {\r\n  style: 'decimal',\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\nexport const formatNumber = {\r\n  format: (val?: number) => {\r\n    if (!val) {\r\n      return '--';\r\n    }\r\n\r\n    return numberFormater.format(val);\r\n  },\r\n  asNumber: (val?: anchor.BN) => {\r\n    if (!val) {\r\n      return undefined;\r\n    }\r\n\r\n    return val.toNumber() / LAMPORTS_PER_SOL;\r\n  },\r\n};\r\n\r\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\r\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\r\n\r\nexport const CIVIC = new anchor.web3.PublicKey(\r\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\r\n);\r\nexport const getFairLaunchTicketSeqLookup = async (\r\n  tokenMint: anchor.web3.PublicKey,\r\n  seq: anchor.BN,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [\r\n      Buffer.from('fair_launch'),\r\n      tokenMint.toBuffer(),\r\n      seq.toArrayLike(Buffer, 'le', 8),\r\n    ],\r\n    FAIR_LAUNCH_PROGRAM_ID,\r\n  );\r\n};\r\n\r\nexport const getAtaForMint = async (\r\n  mint: anchor.web3.PublicKey,\r\n  buyer: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n  );\r\n};\r\n\r\nexport const getNetworkExpire = async (\r\n  gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\r\n    CIVIC,\r\n  );\r\n};\r\n\r\nexport const getNetworkToken = async (\r\n  wallet: anchor.web3.PublicKey,\r\n  gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [\r\n      wallet.toBuffer(),\r\n      Buffer.from('gateway'),\r\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\r\n      gatekeeperNetwork.toBuffer(),\r\n    ],\r\n    CIVIC,\r\n  );\r\n};\r\n\r\nexport const getFairLaunchTicket = async (\r\n  tokenMint: anchor.web3.PublicKey,\r\n  buyer: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from('fair_launch'), tokenMint.toBuffer(), buyer.toBuffer()],\r\n    FAIR_LAUNCH_PROGRAM_ID,\r\n  );\r\n};\r\n\r\nexport function createAssociatedTokenAccountInstruction(\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey,\r\n) {\r\n  const keys = [\r\n    {\r\n      pubkey: payer,\r\n      isSigner: true,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: associatedTokenAddress,\r\n      isSigner: false,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: walletAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: splTokenMintAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: TOKEN_PROGRAM_ID,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n}\r\n\r\nexport function formatSol(sol:number){\r\n    var formated = sol / 1000000000\r\n    return formated\r\n}\r\n\r\n"],"sourceRoot":""}